* chapter 3: Sharing Objects
  + 第二章我们讲到过了,并发编程的关键,是管理对共享,可变数据的访问.
  + 所以第二章主要讲的是,如何利用同步来防止多个线程在同一时间访问同一个数据. 这
    一章讲的则是,通过"其他技巧"让对象能够共享,而且被多个线程同时访问,当然是线程
    安全的访问
  + 第二章的介绍,很容易让人误以为同步"只能":
    1) 让操作原子化
    2) 创建critical section
  + 其实同步还有其他的不易察觉却非常重要的作用:内存的可见性(memory visibility):
    我们不仅仅想阻止线程A在线程B使用数据X的时候得到这个数据, 我们还想让A可以在B
    使用更改X的时候,能够"看到"数据X的最新值
** Visibility
   + 下面这个例子,有两个线程,main线程和reader线程, main线程首先启动reader线程, 
     然后设置ready为true, 并给予number一个非零值.reader线程不停的check readay
     的状态是否为true,如果是的情况下,就打印number的值
     #+begin_src java
       public class NoVisibility {
           private static boolean ready;
           private static int number;
       
           private static class ReaerThread extends Thread {
               public void run() {
                   while (!ready) {
                       Thread.yield();
                   }
                   System.out.println(number);
               }
           }
       
           public static void main(String[] args) {
               new ReaerThread().start();
               number = 42;
               ready = true;
           }
       }
     #+end_src

   + 虽然上面的例子在大多数情况下都能成功打印42, 但是还是存在着下面两种可能的错误:
     1) 死循环:因为读不到ready变成true
     2) 打印0:因为读不到number变成42
   + 造成上面两种错误的原因是:在没有同步的情况下, JVM有权利把所有的指令按照自己
     的想法重新安排顺序(通常是为了缓存,效率等原因)
   + 如果想避免上述情况的发生,说起来也是很简单的:如果一个数据会在多个线程间共享,
     那么就一定要使用合适的同步机制
*** Stale Date
    + 上面错误发生的原因根本上在于,如果不使用同步机制, 某个线程很多时候会发现"失效"
      的数据, 更坏的是,"失效"数据很可能是部分发作的,比如上面的例子, 有两个变量,可能
      有时候是一个失效,或另一个失效,或者都失效
    + 失效的数据,会造成巨大的危害.下面的例子MutableInteger不是线程安全的,线程A正在
      getter的时候,线程B可能在setter.
      #+begin_src java
        @NotThreadSafe
        public class MutableInteger {
            private int value;
        
            public int get() {
                return value;
            }
            public void set(int value) {
                this.value = value;
            }
        }
      #+end_src
    + 更改的方法,就是给两个函数都加上同步机制:仅仅给予setter同步是不够的,因为某个线程
      还是可以在getter的时候,得到"失效"的数据
      #+begin_src java
        @ThreadSafe
        public class SynchronizedInteger {
            @GuardeBy("this") private int value;
        
            public synchronized int get() {
                return value;
            }
            public synchronized void set(int value) {
                this.value = value;
            }
        }
      #+end_src
*** Non-atomic 64-bit Operations
    + 如果没有使用同步机制,线程可能会读取到"失效"的变量,但至少这个变量还是其他线
      程更改的,还不是很离谱.有些时候,会遇到更离谱的情况:读取的值直接就是一个随机
      值
    + 这种随机值的情况,主要发生在64位的变量(long 和double)上面,JVM读取和存储32
      位的数字是原子的,但是读取和存储64位的数字是分两次读取的(64位java应该就没有
      这个问题).所以如果读写64位在两个不同的线程里面,会出现前32位和后32位的数字
      来自不同64位数字的尴尬随机数.
    + 所以即便你不担心会读取到"失效"的变量,如果一旦有64位变量存在被多个线程读取的
      情况(而且没有加锁,没有标记成volatile), 还是加个同步机制吧
*** Locking and Visiility
    + 内置锁可以用来保证一个线程可以"保证"看到另一个线程所做的操作, 比如下面的例
      子, 如果没有同步机制, 线程B无法保证看到x的新值1, 因为它可能由于优化的原因
      直接取用了x在缓存里面的值
      #+begin_example
                     Thread A
                 +---------------+
                 |   y = 1       |
                 +---------------+
                       
                 +---------------+
                 |   lock M      |
                 +---------------+
        
                 +---------------+
                 |   x = 1       |
                 +---------------+
        
                 +---------------+
                 |   unlock M    |                            Thread B
                 +---------------+ --------------------->  +---------------+
                                                           |  lock M       |
                                                           +---------------+
        
                                                           +---------------+
                                                           |  i = x        |
                                                           +---------------+
        
                                                           +---------------+
                                                           |  unlock M     |
                                                           +---------------+
        
                                                           +---------------+
                                                           |  j = y        |
                                                           +---------------+
        
      #+end_example
    + 所以,"锁"并不是只是为了"互相排斥(mutual excusion)", 而且也为了能够让其他
      线程看到"有效的"内存值
*** Volatile Variables
    + Java还提供了一个简单,轻量级的synchronizated, 就是关键字volatile.编译器
      看到volatile的时候,就知道这个变量是共享的, 所以:
      1) 编译器不会把对volatile变量的操作reorder
      2) 编译器不会把volatile变量放入寄存器进行缓存
    + 既然是轻量级的lock,那么volatile还有其局限性:
      - lock可以保证原子性和内存可见性
      - 轻量级lock, volatile变量只能保证内存可见性
    + volatile非常的脆弱,甚至无法保证++的原子性(count++), 最常见的volatile变量
      的用法也就是flag:
      #+begin_src java
        volatile boolean asleep;
        
        while(!asleep) {
            countSomeSheep();
        }
      #+end_src
    + 只有保证如下的三个条件,才能使用volatile变量:
      1) 对这个变量的写入操作,不涉及到它原来的值
      2) 这个变量不涉及其他变量的"不变式"(invariants)
      3) 没有任何理由要为访问此变量加锁
** Publication and Escape
   + 发布(publish)一个对象的意思是,扩展某个对象的作用域,让它以前作用域以外的代码
     能够看到它, 方法有一下:
     1) 存储一个指向对象的引用reference
     2) 从一个非私有的函数里面返回某个对象
     3) 把一个对象当作某个函数的参数
   + 发布一个内部的state是对封装的妥协,会更加难以保证"不变式"
   + 发布一个还没有创建好的对象,是对线程安全的妥协
   + 如果一个对象还没准备好, 就被不小心的发布了,叫做逃逸(escaped)
   + 最明显的发布方式,就是存储一个对象的引用在public static的变量里面, 这样所有
     的人都可以通过knownSecrets得到引用然后知道了Secret的所有内容
     #+begin_src java
       public static Set<Secret> knownSecrets;
       
       public void initialize() {
           knownSecrets = new HashSet<Secret>();
       }
     #+end_src
   + 通过从非private的函数里面返回值的方式,也容易publish不合适的内容, 比如下面这
     个例子,通过返回的引用,我可以轻松的改动本来private的值
     #+begin_src java
       public class UnsafeStates {
           public String[] getStates() {
               return states;
           }
       
           private String[] states = new String[] { "AA", "BB"};
       
           public static void main(String[] args) {
               UnsafeStates us = new UnsafeStates();
               System.out.println(us.getStates()[0]);
               us.getStates()[0] = new String("ZZ");
               System.out.println(us.getStates()[0]);
           }
       
       }
     #+end_src
   + 最后一种可能的发布内部state的方法,是返回一个inner class instance的时候,比如
     下面虽然看似是publish了EventListener, 但是其实EventListener里面含有ref到
     ThisEscape, 所以其实也同时publish了ThisEscape
     #+begin_src java
       public class ThisEscape {
           public ThisEscape(EventSource source) {
               source.registerListener(new EventListener() {
                   @Override
                   public void onEvent(Event e) {
                       doSomething(e);
                   }
               });
           }
       
           void doSomething(Event e) {
           }
       
           interface EventSource {
               void registerListener(EventListener e);
           }
       
           interface EventListener {
               void onEvent(Event e);
           }
       
           interface Event {
           }
       }
     #+end_src
*** Safte Construction Practices
    + 上面的例子告诉我们,在ctor里面publish 对象的结果,很可能是publish了一个没有构造
      好的对象
    + 一个常见的在构造阶段escape this引用的做法就是在构造函数里面开启线程. 因为构造
      函数里面this是和其他线程共享的, 所以:
      - this引用可以作为参数"显示"的传递给线程
      - this引用也可以"隐性"的被调用,因为Thread是inner class
    + 从ctor里面调用线程不是错误的关键,关键是不要那么着急. 从构造函数里面调用被重载的
      函数(比如上面的调用public void onEvent)肯定即不是private,也不是final, 肯定会
      this引用泄漏.
    + 如果实在想在构造函数里面注册一个event listenr或者开启一个线程,那么可以选择把构造
      函数设计成private, 然后用public的工厂方法,如下:
      #+begin_src java
        public class SafeListener {
            private final EventListener listener;
        
            private SafeListener() {
                listener = new EventListener() {
                    @Override
                    public void onEvent(Event e) {
                        doSomething();
                    }
                };
            }
        
            public static SafeListener newInstance(EventSource source) {
                SafeListener safe = new SafeListener();
                source.registerListener(safe.listener);
                return safe;
            }
        
            void doSomething() {
            }
        
            interface EventSource {
                void registerListener(EventListener e);
            }
        
            interface EventListener {
                void onEvent(Event e);
            }
        
            interface Event {
            }
        }
      #+end_src
** Thread Confinement
   + 前面说过, "共享且可变"的函数访问必须需要同步机制, 一个不需要同步的方法说来
     简单,就是"不要共享", 如果一个变量只被一个线程访问,当然用不到同步机制.
   + 不共享数据的方法又较thread confinement,是最简单的线程安全的方法.
   + 一个常见的使用thread confinment来实现线程安全的例子是JDBC(Java Database
     Connectivity): 在一个服务器端, 一个线程会从connection 池中请求一个connection
     然后等用完了之后,再换回去,期间不会把这个connection共享给其他线程.所以,通过
     不共享资源的方法, 实现了线程安全.
   + 不共享资源的方法不是从java语言的角度来保证的.(前面的JDBC的例子, JDBC的spec
     没有要求一定要线程安全, 而线程不共享connection是由servlet 和EJB request的
     结构造成的), 而是要求软件的设计来保证的(当然可以借助本地变量, ThreadLocal类)
*** Ad-hoc Thread Confinement
    + 临时性的线程封闭(ad-hoc thread confinement)只是说如果你的代码保证是单线程了
      才可以使用(比如GUI), 其实不是很鼓励使用
*** Stack Confinement
    + stack confinement是thread confinement的一种, 其实就是用local variable来
      代替全局或者作用域更大的变量.
    + 之所以叫stack,是因为local variable一般都是存放在stack上的, 而每个thread都有
      自己的stack, 不和其他thread共享.
    + stack confinement更易于实现,健壮性也强于ad-hoc thread confinement
      #+begin_src java
        import java.util.*;
        
        public class Animals {
            Ark ark;
            Species species;
            Gender gender;
        
            public int loadTheArk(Collection<Animal> candidates) {
                SortedSet<Animal> animals;
                int numPairs = 0;
                Animal candidate = null;
        
                //animals confined to method, don't let them escape!
                animals = new TreeSet<Animal>(new SpeciesGenderComparator());
                animals.addAll(candidates);
        
                for (Animal a : animals) {
                    if (candidate == null || !candidate.isPotentialMate(a))
                        candidate = a;
                    else {
                        ark.load(new AnimalPair(candidate, a));
                        ++numPairs;
                        candidate = null;
                    }
                }
                return numPairs;
            }
            class Animal {
                Species species;
                Gender gender;
        
                public boolean isPotentialMate(Animal other) {
                    return species == other.species && gender != other.gender;
                }
            }
        
            enum Species {
                AARDVARK, BENGAL_TIGER, CARIBOU, DINGO, ELEPHANT, FROG, GNU, HYENA,
                IGUANA, JAGUAR, KIWI, LEOPARD, MASTADON, NEWT, OCTOPUS,
                PIRANHA, QUETZAL, RHINOCEROS, SALAMANDER, THREE_TOED_SLOTH,
                UNICORN, VIPER, WEREWOLF, XANTHUS_HUMMINBIRD, YAK, ZEBRA
            }
        
            enum Gender {
                MALE, FEMALE
            }
        
            class AnimalPair {
                private final Animal one, two;
        
                public AnimalPair(Animal one, Animal two) {
                    this.one = one;
                    this.two = two;
                }
            }
        
            class SpeciesGenderComparator implements Comparator<Animal> {
                public int compare(Animal one, Animal two) {
                    int speciesCompare = one.species.compareTo(two.species);
                    return (speciesCompare != 0) ? speciesCompare : one.gender.compareTo(two.gender);
                }
            }
        
            class Ark {
                private final Set<AnimalPair> loadedAnimals = new HashSet<AnimalPair>();
        
                public void load(AnimalPair pair) {
                    loadedAnimals.add(pair);
                }
            }
        }
      #+end_src
    + 在线程内部使用线程不安全的对象(保证其local)也是可以保证整个线程安全的, 但是要
      注意:
      - 这个线程不安全对象只属于这个线程
      - 这个线程不安全这件事情要文档记录
*** ThreadLocal
    + 最正式的保护线程confinement的方法就是ThreadLocal
    + 其实ThreadLocal这个东西叫做ThreadLocalVariable 更合适, 其实现机制就是为每一个
      使用该变量的线程提供一个变量值的副本(通过new)
    + ThreadLocal为每个线程创建了私有的变量, 这个其实就是"用空间换时间", 每个线程
      都有自己的变量,就不会打架了.
    + 而同步机制,就是"用时间换空间":只有一份变量,大家排好队依次取用.
      #+begin_src java
        public class ConnectionDispenser {
            static String DB_URL = "jdbc:mysql://localhost/mydatabase";
        
            private ThreadLocal<Connection> connectionHolder
                = new ThreadLocal<Connection>() {
                public Connection initialValue() {
                    try {
                        return DriverManager.getConnection(DB_URL);
                    } catch (SQLException e) {
                        throw new RuntimeException("Unable to acquire Connection, e");
                    }
                }
            };
        
            public Connection getConnection() {
                return connectionHolder.get();
            }
        }
        
      #+end_src
    + ThreadLocal最开始的初衷就是建立thread confinement的,为每个线程创建一份自己
      的数据,所以不要在其他方面滥用
** Immutability
   + 同步的对象是"共享的变量", 我们打完"共享"的主意,现在是打"变量"主意的时候了,
     把"变量"变成"常量"是一个更简单的注意:常量天生就线程安全
   + 当然我们这里的常量是immutable objects: 就是在构造之后就无法改变的对象
   + immutable对象不是所有的域都是final, 那远不够, 要达到下面的条件
     - 对象的state在构造以后无法改变
     - 对象所有的域都是final的
     - 对象构造的过程是没有差错的(不会导致引用逃逸 reference escape)
   + Immutable对象的内部还是可以使用mutable,只是要好好设计.比如下面这个例子, Set
     是可以改变的,但是下面的设计让构造之后,就只有final且private的stooges才可以
     接触到这个Set
     #+begin_src java
       public class ThreeStooges {
           private final Set<String> stooges = new HashSet<String>();
       
           public ThreeStooges() {
               stooges.add("Moe");
               stooges.add("Larry");
               stooges.add("Curly");
           }
       
           public boolean isStooge(String name) {
               return stooges.contains(name);
           }
       
       }
     #+end_src
   + 即便是使用了immutable的对象,其实也是可以"改变"它的值的:使用一个新的对象
     只不过值不同(allocation比你想象的要高效, immutable会带来更多的优势)
*** Final Fields
    + final变量无法改变(虽然他们指向的对象可能改变). 使用final能够保证:
      - 初始化安全(initialization safety)
      - 不需要同步机制,保证线程安全
    + 除非某个变量可能会改变,把所有的变量声明为final是一个good practice
*** Example: Using Volatile to Publish Immutable Objects
    + 下面这个例子就是创建了一个immutable holder class,来确保线程安全
    + 如果用mutable holder object,你必须使用lock. 下面的immutable object
      一旦创建就无法更改. 如果想要更改变量,那么就要创建一个新的immutable 
      object.
      #+begin_src java
        public class OneValueCache {
            private final BigInteger lastNumber;
            private final BigInteger[] lastFactors;
            
            public OneValueCache(BigInteger i, BigInteger[] factors) {
                lastNumber = i;
                lastFactors = Arrays.copyOf(factors, factors.length);
            }
            
            public BigInteger[] getLastFactors(BigInteger i) {
                if (lastNumber == null || !lastNumber.equals(i)) {
                    return null;
                } else {
                    return Arrays.copyOf(lastFactors, lastFactors.length);
                }
            }
        }
      #+end_src



      

      

    
** Safe Publication
   + 到现在为止,我们的策略主要是"堵":就是不让对象publish,当然就不会有问题
   + 但是有时候,我们的确要发布一个对象,这个时候就要注意很多问题, 下面的这种简单
     的把一个指向对象的ref抛到public区域的做法无法保证publish的安全
     #+begin_src java
       // Unsafe publication
       public Holder holder;
       
       public void initialize() {
           holder = new Holder(42);
       }
     #+end_src
   + 这个例子主要的问题是可能会展示给其他线程一个"不完全构造"的对象
*** Improper Publication: When Good Objects Go Bad
    + 看下面的例子, 由于没有进行必要的"同步", 一个线程可能开始看到一个值是"过时的",
      但是紧接着,它有看到了正确的值,这种情况下,会让下面的assertSanity函数抛出
      AssertionError
      #+begin_src java
        public class Holder {
            private int n;
            public Holder(int n) {
                this.n = n;
            }
            public void assertSanity() {
                if (n != n) {
                    throw new AssertionError("This is statement is false");
                }
            }
        }
      #+end_src
    + 不光是我们刚才描述的那些情况,一旦数据在多个线程间共享,而且没有正确的进行同
      步,那么很多更加奇怪的事情会发生.
*** Immutable Objects and Initialization Safety
    + 因为immutable对象如此重要, java虚拟机专门提供了一个保证:"共享的不变量的
      初始化是安全的"
    + java虚拟机提供的这一保证特别重要, 它让线程间共享数据有了一个捷径(不使用同
      步手段的捷径),那就是使用不变对象(不变对象的条件:无法更改的state, 所有域都
      是final的, prper的创建过程).
*** Safe Publication Idioms
    + 如果我们不能使用不变对象,那么就要采用"同步"的手段来保证publish的正确,而且:
      - 不仅仅要同"步发布(publish)对象"的线程
      - 还要同步"消费这些发布的对象"的线程
    + 我们首先讨论的是,如何"消费这些发布的对象"看到"发布的对象":
      - 最常见的办法:用static initializer来初始化object reference, JVM会在
        class初始化的时候,就初始化static initializer, 借助于JVM内部的同步机制,
        这种初始化的方法可以保证安全的发布(publish)对象
        #+begin_src java
          public static Holder holder = new Holder(42);
        #+end_src
      - 把object reference存储到一个volatile或者AutomicReference里面
      - 把object reference存储到一个properly constructed对象的final域里面
      - 把object reference存储到一个被lock很好保护的域里面(比如collection), 
        这一条举例就是线程A把对象X放入到线程安全的vector里面(或者其他collection), 
        线程B紧接着从这个vector里面读取对象X,虽然没有任何的"同步"手段,但是我们能
        保证线程B能够看到准确的X的state
*** Effectively Immutable Objects
    + 如果一个对象被某个线程"安全的publish"出来了以后,其他线程就可以看到它的值了.但是
      还不一定能成功的取得这个值,因为要考虑到其他线程会修改这个对象,那么如果不使用"同步"
      的话,取得的值是不值得信任
    + 我们这里首先假设能够保证这个值在安全publish以后,就不再改变了,那么其他线程再取用
      这个线程的时候,就不需要其他的同步手段了. 这种不是严格医院上的"不变"(不是final修
      饰的),而是程序业务逻辑上的"不变",导致publish后不需要"同步手段"的情景,我们叫做
      effectively immutable.
    + 下面是一个effectively immutable的例子,用一个Map来存储上次登陆的用户,用户对象
      放入到线程安全的Map中以后,就可以被其他线程看到了.如果我们再能保证这个数据不再改变,
      那么就可以不使用任何其他的"同步"手段,而达到安全正确取用publish完的数据
      #+begin_src java
        public Map<String, Date> lastLogin =
            Collections.synchronizedMap(new HashMap<String, Date>());
      #+end_src
*** Mutable Objects
    + 如果我们不能保证一个对象在"安全发布"之后保证不更改,那么"安全发布"仅仅能保证其他
      线程能够看到这个"发布的state", 但是如果他们想使用,那么每次都要加上"同步"来保证
      取值的正确性. 同步的手段主要是线程安全,或者是锁.
*** Sharing Objects Safety
    + 无论合适,你要取得一个对象的reference的时候,你一定要知道你可以对它做什么(下面的问题
      也是文档中需要积极记录的):
      - 你需要获得锁,然后访问它么
      - 你可以更改它的值么,还是仅仅能读取它的值
    + 在线程间共享对象的方法简单总结如下:
      - Thread-confined, 每个线程都自己的一份数据
      - Shared read-only, 只读数据可以在没有锁的情况下被分享. immutable 是只读, 
        effectively immutable也是只读
      - Shared thread-safe, 线程安全的对象自己内部就能实现同步,可以不加"同步方法"
        在线程间共享
      - Guarded, guarded对象一定要通过特定的锁来访问. guarded对象要么是在其他线程
        安全对象里面的对象,要么是被特定锁保护的对象.

