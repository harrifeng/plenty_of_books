* Chapter 2: Thread Safety
  + 有点令人出乎意料的是, 并发编程,并不是一直都和线程或者锁有关.写出线程安全代码
    更重奥的是管理"状态的准入"(accesss to state), 特别是对共享的可变状态
  + 一般来说,一个对象的状态就是数据. 一个对象的状态有时候也会和其他对象有关,这要
    看是哪种数据结构:比如HashMap的状态一部分存在HashMap中,另一部分存在成员对象
    里面,比如下面的例子, hm里面肯定存有一部分状态,但是同时foo1,foo2里面也有,因
    为java的hashmap其实存储的不过是一个reference, 下面例子中,通过1, hashmap
    只能找到foo1这个object, foo的val值是多少,hashmap不会存储的
    #+begin_src java
      ///////////////////
      // output        //
      // 1 15          //
      // 2 35          //
      // [1=115, 2=35] //
      ///////////////////
      
      public class TestCode {
          public static void main(String[] args) {
              HashMap<Integer, Foo> hm = new HashMap<Integer, Foo>();
              Foo foo = new Foo(15);
              Foo foo2 = new Foo(35);
              hm.put(1, foo);
              hm.put(2, foo2);
      
              for (Map.Entry<Integer, Foo> e : hm.entrySet()) {
                  System.out.println(e.getKey() + " " + e.getValue());
              }
              foo.setVal(115);
              System.out.println(hm.entrySet());
          }
      }
      
      class Foo{
          public void setVal(int val) {
              this.val = val;
          }
      
          private int val;
          public Foo(int v) {
              val = v;
          }
      
          public String toString() {
              return "" + val;
          }
      }
    #+end_src
  + 所谓"共享",是说一个变量可以被多个线程访问到,所谓"可变醒"是说一个变量的值是可
    以改变的.所谓线程安全,就是要防止数据被"无法控制的并发访问"
  + 一个对象是否需要线程安全,就是看他是否是被多个线程访问到.
  + 如果多个线程访问一个数据, 其中有一个要写入的话, 我们就需要同步方法了, 在java
    里面就是关键字synchronized, 其核心就是提供一个"排外锁(exclusive locking)"
    这个排外锁是最粗鲁的方法,同步方法还包括:
    - volatile 关键字
    - 显示锁explicit lock
    - 自动变量automatic variable
  + 如果多个线程访问同一个数据导致错误, 那么可以有如下几个方法来改正:
    - 不要在线程直接分享state
    - 把state标记成immutable
    - 在所有能够访问到state的地方,使用synchronization
  + 上面的建议看起来简单,但是如果你一开始设计的时候没有考虑到线程安全,那么改起来
    确实是不那么容易,所以最好的方法,就是在你设计一个class的时候,就把他设计成线程
    安全的
  + 在一个大型的系统上面,确认一个变量是否被多个线程访问,是非常困难的.幸运的是,面向
    对象的很多设计方法能够帮助我们设计出更好,更容易维护的class. 比如封装和数据掩盖
    可以帮助你更容易的设计线程安全:越少的代码能够接触到某些代码, 越容易保证使用的
    同步性.
** What is Thread Safety:
   + 如果一个类能在多个线程同时调用,且不管运行时如何调度其他线程, 都可以在调用代
     码不用附加任何同步机制的情况下, 行为正常的运行
   + A class is thread-safe if it behaves correctly when accessed 
     from multiple threads, regardless of the scheduling or interlevaing 
     of the execution of thosed threads by the runtime environment, and 
     with no additional synchronization other coordination on the part 
     of the calling code
*** Example: A Statelses Servlet
    + 第一章我们说过, 有些框架会创建线程然后从这些线程里面,调用你的代码, 从而要
      求你自己的代码也是线程安全的. 其实很多时候,线程安全的要求,并非是你想要使用
      线程,而是你想要使用某些功能,比如Servlet framework
    + 下面这个例子,从request接受请求,factor这个请求,然后放到response传回去
      #+begin_src java
        @ThreadSafe
        public class StatelessFactorizer implements Servlet {
            public void service(ServletRequest req, ServletResponse resp) {
                BigInteger i = extractFromRequest(req);
                BigInteger[] factors = factor(i);
                encodeIntoResponse(resp, factors);
            }
        }
      #+end_src
    + StatelessFactorizer, 和大多数的servlet一样是没有状态的(stateless):
      - 自己没有任何的数据
      - 也不引用任何其他类的数据
    + StatelessFactorizer拥有短暂的state, 局部变量, 但是这些局部变量是在线程
      自己的stack上面的,只对当前运行的线程可见.线程A访问StatelessFactorizer不
      会影响线程B访问StatelessFactorizer,因为他们之间不会共享state.
    + 因为一个线程访问stateless的对象不会影响其他线程的正确运行,所以,
      stateless的对象总是线程安全的
** Atomicity
   + 如果我们想加入一个变量来计算当前的处理的请求要求.那么一个常见的错误
     加变量的方法:
     #+begin_src java
       @NotThreadSafe
       public class UnsafeCountingFactorizer implements Servlet {
           private long count = 0;
           
           public long getCount() {
               return count;
           }
       
           public void service(ServletRequest req, ServletRequest resp) {
               BigInteger i = extractFromRequest(req);
               BigInteger[] factors = factor(i);
               ++count;
               encodeIntoResponse(resp, factors);
           }
       }
     #+end_src
   + 第一章的例子已经讲到, 如果调度非常不幸运的话,会出现两个线程返回值相同的情况,
     或许你觉得,极端返回一个相同的计数,这种低概率的精度错误可以忽略,那你可就打错特
     错了. 如果这个计数是用来产生序列,或者对象标识的话,那么从不同的调用处得到相同
     的这种标识(或者序列)会导致数据一致性的多种问题,最常见的就是race condition
   + 这个例子还会出现另外一种叫做read-modify-write的race condition:你像通过
     count的大小来进行操作, 在你getCount()的过程中, count的大小可能已经改变了.
     也就是说读取一个可能会被更改的值,读取的结果可能是无效的.
*** Race Conditions
    + 当一个正确的结果,需要依赖幸运的时机掌握的时候(不完全靠自己就行), 竞争环境就
      会发生
    + 最常见的一种race condition就是check-then-act(要观察下当前的情况,然后做
      决定):
      - 某天你和X约好去大学城旁边的地铁站见面
      - 到了你发现有两家星巴克A和星巴克B
      - 你去星巴克A, 没发现X, 去星巴克B, 又没发现X. 然后去A,然后去B...非常繁忙,
        但是还是找不到X,这时候存在很多种情况:
        1) 你朋友就没来
        2) 你朋友刚才才星巴克B,当你去星巴克B的时候,他已经去星巴克A啊.
      - 有可能这个下午你可能都见不到你的朋友,因为你的策略是:
        1) 去某个星巴克,发现X不在check
        2) 然后去另外一个星巴克then-act
      - 问题的根源在于[去某个星巴克, 发现X不在], 这个过程只是"当时正确",一旦你离开
        你的朋友X可能就来了. 这个观察是无效的,换句话说就是, "无效的观察,导致了大多
        数的race condition"
*** Example: Race Conditions in Lazy Initialization
    + 另外一个使用check-then-act的例子是lazy initialization: getInstance首先
      厕所一下ExpensiveObject是不是已经创建了,如果还没有创建, 就创建,如果已经创建了
      就返回存在的object
      #+begin_src java
        @NotThreadSafe
        public class LazyInitRace {
            private ExpensiveObject instance = null;
        
            public ExpensiveObject getInstance() {
                if (instance == null) {
                    instance = new ExpensiveObject();
                }
            }
        }
      #+end_src
    + LazyInitRace也存在race condition: 线程A和B同时调用getInstance, A看到的是
      null, 然后创建ExpensiveObject, 恰巧在创建的同时(unluck timing)B也看到的是
      null, 然后也创建ExpensiveObject.所以不同的调用者会收到不同的对象
*** Compound Actions
    + LazyInitRace 和 UnsafeCountingFactorizer 的数据都需要一种原子性的操作,数据
      更改的过程变的不可分: 保证其他线程观察或者修改state的时候,要么是在我们开始之前,
      要么是在我们修改之后, 而不是在这两者之间
    + 为了保证线程安全,check-then-act和read-modify-write 操作都必须是原子性的.
    + 我们把check-then-act和read-modify-write这种必须通过原子性来保证线程
      安全的操作叫做compound action
      #+begin_src java
        @ThreadSafe
        public class CountingFactorizer implements Servlet {
            private final AtomicLong count = new AtomicLong(0);
        
            public long getCount() {
                return count.get();
            }
        
            public void service(ServletRequest req, ServletRequest resp) {
                BigInteger i = extractFromRequest(req);
                BigInteger[] factors = factors(i);
                count.incrementAndGet();
                encodeIntoResponse(resp, factors);
            }
        }
      #+end_src
    + 上面这个例子就是利用了java的java.util.concurrent.atomic, 这个package能够使
      得一切操作原子化.
    + 在实际操作中,尽可能的使用已有的线程安全的类来管理类的状态.
** Locking
   + 我们前面通过一个线程安全的AtomicLong类来管理计数,保证了整个大类的线程安全, 如果我
     要加入更多,类型更为复杂(不是long)的state,我还可以像下面的例子一样,全部都使用Atomic
     帮手(这里是AtomicReference)么
   + 比如为了提高servlet的效率,我们设计了一个cache的机制, 如果新的请求和上一个请求是一样
     的,那么我们就可以不用重复计算,而直接返回上次的计算结果
     #+begin_src java
       @NotThreadSafe
       public class UnsafeCachingFactorizer implements Servlet {
           private final AtomicReference<BigInteger> lastNumber
               = new AtomicReference<BigInteger> ();
           private final AtomicReference<BigInteger[]> lastFactors
               = new AtomicReference<BigInteger[]>();
       
           public void service(ServletRequest req, ServletResponse resp) {
               BigInteger i = extractFromRequest(req);
               if (i.equals(lastNumber.get())) {
                   encodeIntoResponse(resp, lastFactors.get());
               } else {
                   BigInteger[] factors = factor(i);
                   lastNumber.set(i);
                   lastFactors.set(factors);
                   encodeIntoResponse(resp, factors);
               }
           }
       }
     #+end_src
   + 尽管上面的例子中,每一个变量都是线程安全的,但是整个类却无法达到线程安全.
   + 线程安全的定义,要求"不变式"一直有效, 我们这个逻辑的"不变式"就是: lastFactors
     一定要是lastNumber计算的结果, 很遗憾,上面的代码无法满足这个要求, 除非我们"原子
     性"的同时更新两个变量: 线程A获取这两个变量的时候(分两次),线程B可能已经更改了他们
*** Intrinsic Locks
    + java提供了一种最简单的锁,内置锁, 他主要是通过原子化函数(静态的原子化是类)来达到
      线程安全的目的, 如下
      #+begin_src java
        @ThreadSafe
        public class SynchronizedFactorizer implements Servlet {
            @GuardedBy("this") private BigInteger lastNumber;
            @GuardedBy("this") private BigInteger[] lastFactors;
        
            public synchronized void service(ServletRequest req,
                                             ServletResponse resp) {
                BigInteger i = extractFromRequest(req);
                if (i.equals(lastNumber)) {
                    encodeIntoResponse(resp, lastFactors);
                } else {
                    BigInteger[] factors = factor(i);
                    lastNumber = i;
                    lastFactors = factors;
                    encodeIntoResponse(resp, factors);
                }
            }
        }
      #+end_src
    + 这种原子化虽然达到了线程安全的目的,但是确是以巨大的效率牺牲为代价的:因为内置锁本
      质上是一种互斥锁,同一时间只能有一个线程访问函数.
*** Reentrancy
    + 内置锁都是可重入(renentrancy)的, 所谓可重入,就是说一个线程自己已经获得了某个内
      置锁, 当它试图再次获得这个内置锁的时候,是成功的!可是一个线程为什么会再次请求自己
      已经拥有的锁呢? 在面向对象当中,这种例子非常常见. 可以说可重入的设计,极大的简化了
      面向对象的并发开发. 
      #+begin_src java
        public class Widget {
            public synchronized void doSomething() {
            }
        }
        
        public class LoggingWidget extends Widget {
            pblic synchronized void doSomething() {
                System.out.println(toString() + ": calling doSomething");
                super.doSomething();
            }
        }
      #+end_src
    + 上面的例子中,如果内置锁不是可重入的话, 在调用super.doSomething()的时候,就会永
      远的等待下去,(因为子类的doSomething开始的时候,肯定会获取内置锁,而调用super父类
      函数的时候,会再次试图获取内置锁)
    + java实现内置锁的可重入的方法,就是计数,线程首次获得这个锁,计数为0, 如果其他线程线
      程来,发现是0,就等待,而本线程再次获取这个锁,会导致计数变成1
** Guarding State with Locks
   + 锁的引入,让多线程有序访问变量(一个接一个,而不是同时)变得方便. 前面说到的check-then-act
     和read-modify-write也可以使用锁, 但是要变得非常复杂:
     - 在整个compound action的过程当中都要用锁
     - 每个变量用到的地方还要用锁
   + 每一个共享的变量,都要用一个锁来保护,这样维护的人才知道是哪一个锁
   + 前面的例子交给我们:
     - 如果只有一个变量被多个线程访问,那么要给这个变量加锁, 或者把这个变量替换成线程安全类
     - 如果"不变式"涉及到多个变量,而且这些变量也会被多个线程访问,那么要把他们都放在同一个锁里面
   + 前面我们讲到多个变量的线程安全问题的时候,我们是讲整个函数都加锁,这样会有效率方面的问题, 
     所以加锁的层次要降低一些
** Liveness and Performance
   + 刚才我们的锁是加在了函数层次,这里我们可以重新设计代码,让锁的层次更低一些
     #+begin_src java
       @ThreadSafe
       public class CachedFactorizer impements Servlet {
           @GuardedBy("this") private BigInteger lastNumber;
           @GuardedBy("this") private BigInteger[] lastFactors;
           @GuardedBy("this") private long hits;
           @GuardedBy("this") private long cacheHits;
       
           public synchronized long getHits() {
               return hits;
           }
       
           public synchronized double getCacheHitRatio() {
               return (double) cacheHits / (double) hits;
           }
       
           public void service(ServletRequest req, ServletResponse resp) {
               BigInteger i = extractFromRequest(req);
               BigInteger[] factors = null;
               synchronized(this) {
                   ++hits;
                   if (i.equals(lastNumber)) {
                       ++cacheHits;
                       factors = lastFactors.clone();
                   }
               }
               if (factors == null) {
                   factors = factor(i);
                   synchronized(this) {
                       lastNumber = i;
                       lastFactors = factors.clone();
                   }
               }
               encodeIntoResponse(resp, factors);
           }
       }
     #+end_src
   + 从代码中我们看到,因为使用了内置锁, AtomaticLong这种线程安全类的方式被抛弃了,因为两种
     同步方式常常会引发错误
   + 我们代码加锁的区域不大,但是必要的地方也都加了锁, 这样既坚固了效率,又保障了安全
   + 不要试图在如下两种情况下加锁:
     - 时间较长的计算
     - 有可能无法快速完成的任务(比如网络IO, 控制台IO)




      


    


      


