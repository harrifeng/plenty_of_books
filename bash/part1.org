#+TITLE: Part 1: learning the Shell
* What is the shell
  + 当我们说到command line的时候,我们其实是说的shell. shell是一个从键盘接受信息
    传递给操作系统的程序.Linux默认的shell是bash
** Terminal Emulators
   + 如果我们使用GUI界面的话,我们还要使用terminal emulator来和shell进行联系.KDE
     里面使用的是konsole, GNOME使用的是gnome-terminal
** Your First keystrokes
   + 打开terminal emulator,应该是如下这个样子的
     #+begin_src sh
       lvtest@auto-inst:~$
     #+end_src
   + $(dollar sign)代表一般用户, #(hash mark)代表超级用户.
*** Command History
    + 上下键可以选择上一条下一条命令,一遍最少会保存500条历史
*** Cursor Movement
    + 左右键,可以让光标左右移动
** Try Some Simple Commands
   + date是日期命令
     #+begin_src sh
       lvtest@auto-inst:~$ date
       Wed Feb 26 16:13:11 CST 2014
     #+end_src
   + cal是日历命令
     #+begin_src sh
       lvtest@auto-inst:~$ cal
          February 2014
       Su Mo Tu We Th Fr Sa
                          1
        2  3  4  5  6  7  8
        9 10 11 12 13 14 15
       16 17 18 19 20 21 22
       23 24 25 26 27 28
     #+end_src
   + df可以查看当前驱动器下面的剩余空间
     #+begin_src sh
       lvtest@auto-inst:~$ df
       Filesystem     1K-blocks    Used Available Use% Mounted on
       /dev/sda1       40120704 1944148  36131884   6% /
       none                   4       0         4   0% /sys/fs/cgroup
       udev              496420       4    496416   1% /dev
       tmpfs             101188     296    100892   1% /run
       none                5120       0      5120   0% /run/lock
       none              505932       0    505932   0% /run/shm
       none              102400       0    102400   0% /run/user
     #+end_src
   + free产科内存的剩余
     #+begin_src sh
       lvtest@auto-inst:~$ free
                    total       used       free     shared    buffers     cached
       Mem:       1011868     227332     784536          0      21464      78256
       -/+ buffers/cache:     127612     884256
       Swap:      1046524          0    1046524
     #+end_src
** Ending a Terminal Session
   + 我们使用exit来结束一个terminal session
   + 除了我们上面说的terminal emulator, Linux还会在GUI的背后运行一些terminal
     session.叫做virtual terminal,我们可以通过CTRL+ALT+F1~F6来调用,返回GUI
     桌面使用ALT-F7
* Navigation
** Understanding the Filesystem Tree
   + 和windows一样,linux也是采用了树形结构的文件系统.第一个文件夹叫做root 文件夹(/)
   + 和windows不一样的是:windows为每一个分区准备了一个单独的"文件系统树", 对于Linux
     来说,无论有多少设备,都只有一套"文件系统树", 额外的设备是通过"mount"的形式来放在
     某个文件夹下面的
** The Current Working Directory
   + 我们的shell当前无论如何都会在某个文件夹下,使用pwd来表示
     #+begin_src sh
       lvtest@auto-inst:~/tmp$ pwd
       /home/lvtest/tmp
     #+end_src
** Listing the Contents of a Directory
   + 当前文件夹下的内容使用ls
     #+begin_src sh
       lvtest@auto-inst:~/tmp$ ls
       a.out  printf.c  testsig.c  unpbook
     #+end_src
** Changing the Current Working Directory
*** Absolute pathnames
    + 我们使用以"/"开头的绝对文件路名来cd到相应文件夹
      #+begin_src sh
        lvtest@auto-inst:~/tmp$ cd /usr/bin
        lvtest@auto-inst:/usr/bin$ pwd
        /usr/bin
      #+end_src
*** Relative Pathnames
    + 相对路径就是从pwd开始如何找到下一级,其中"."是当前文件夹".."是上层文件夹
      #+begin_src sh
        lvtest@auto-inst:/usr$ pwd
        /usr
        lvtest@auto-inst:/usr$ cd ./bin
        lvtest@auto-inst:/usr/bin$ pwd
        /usr/bin
      #+end_src
*** Some helpful Shortcuts
    + 一些有用的cd快捷键
      | Shortcut     | Result                                                |
      |--------------+-------------------------------------------------------|
      | cd           | Changes the working directory to your home directory  |
      | cd -         | Changes the working directory to the previous working |
      |              | directory                                             |
      | cd ~username | Changes the working directory to the home directory   |
      |              | of theusername.                                       |
      #+begin_src sh
        lvtest@auto-inst:/usr/bin$ pwd
        /usr/bin
        lvtest@auto-inst:/usr/bin$ cd
        lvtest@auto-inst:~$ pwd
        /home/lvtest
        lvtest@auto-inst:~$ cd -
        /usr/bin
        lvtest@auto-inst:/usr/bin$ pwd
        /usr/bin
        lvtest@auto-inst:/usr/bin$ cd ~lvtest
        lvtest@auto-inst:~$ pwd
        /home/lvtest
      #+end_src
* Exploring The System
** More Fun with ls
   + ls 不仅仅可以列出当前文件夹的内容,还可以列出其他文件夹的内容,甚至多个文件夹的内容
     #+begin_src sh
       lvtest@auto-inst:~$ ls /usr
       bin  games  include  lib  local  sbin  share  src
       lvtest@auto-inst:~$ ls ~ /usr
       /home/lvtest:
       authorized_keys  backupssh  test  tmp

       /usr:
       bin  games  include  lib  local  sbin  share  src
     #+end_src
*** Options and Arguments
    + 我们的命令都是由如下三部分组成的
      #+begin_example
        command -options arguments
      #+end_example
    + ls就支持-l这种"单字母"参数,而且单字母参数可以写在一块,效果叠加,还支持通过
      "--"来增加long options
      #+begin_src sh
        lvtest@auto-inst:~$ ls -l
        total 16
        -rwx------ 1 lvtest lvtest  802 Oct 24 15:05 authorized_keys
        drwx------ 2 lvtest lvtest 4096 Oct 24 15:05 backupssh
        drwxrwxr-x 3 lvtest lvtest 4096 Oct 24 16:45 test
        drwxrwxr-x 3 lvtest lvtest 4096 Feb 21 16:33 tmp
        lvtest@auto-inst:~$ ls -lt
        total 16
        drwxrwxr-x 3 lvtest lvtest 4096 Feb 21 16:33 tmp
        drwxrwxr-x 3 lvtest lvtest 4096 Oct 24 16:45 test
        -rwx------ 1 lvtest lvtest  802 Oct 24 15:05 authorized_keys
        drwx------ 2 lvtest lvtest 4096 Oct 24 15:05 backupssh
        lvtest@auto-inst:~$ ls -lt --reverse
        total 16
        drwx------ 2 lvtest lvtest 4096 Oct 24 15:05 backupssh
        -rwx------ 1 lvtest lvtest  802 Oct 24 15:05 authorized_keys
        drwxrwxr-x 3 lvtest lvtest 4096 Oct 24 16:45 test
        drwxrwxr-x 3 lvtest lvtest 4096 Feb 21 16:33 tmp
      #+end_src
    + 下面就来总结一下ls的参数
      | Option | Long Option      | Description                                    |
      |--------+------------------+------------------------------------------------|
      | -a     | --all            | List all files, even hidden files              |
      | -d     | --directory      | if No -d dpecified, ls will list the contents  |
      |        |                  | of directory. with -d, ls will list the        |
      |        |                  | directory itself                               |
      | -F     | --classify       | This option will append an indicator character |
      |        |                  | to the end of each listed name(for example, a  |
      |        |                  | forward slash for directory)                   |
      | -h     | --human-readable | in long format listing(with -l), display the   |
      |        |                  | sizes in human-readable format rather than in  |
      |        |                  | bytes                                          |
      | -l     |                  | Display result in long format                  |
      | -r     | --reverse        | Display the results in reverse order           |
      | -S     |                  | Sort result by file size                       |
      | -t     |                  | Sort by modification time                      |
*** A Longer Look at Long Format
    + 下面是一个long listing的例子
      #+begin_src sh
        lvtest@auto-inst:~/tmp$ ls -l
        total 24
        -rwxrwxr-x  1 lvtest lvtest 8522 Feb 21 16:33 a.out
        -rw-rw-r--  1 lvtest lvtest  222 Feb 21 16:33 printf.c
        -rw-rw-r--  1 lvtest lvtest 1042 Feb 19 18:09 testsig.c
        drwxrwxr-x 40 lvtest lvtest 4096 Feb 20 16:48 unpbook
      #+end_src
    + 我们以最后一行来分析long listing
      | Field        | Meaning                                                        |
      | drwxrwxr-x   | first character indicates the type fo file. "-"-> regular file |
      |              | "d"-> directory next three characters"rwx"->access rights for  |
      |              | file's owner, next three characters"rwx"->access rights for    |
      |              | file's group, final thress"r-x" for everyone else              |
      | 40           | File's number of hard links                                    |
      | lvtest       | The user naemfo the file's owner                               |
      | lvtest       | The name of the group that owns the file                       |
      | 4096         | Size of the file in bytes                                      |
      | Feb 20 16:48 | Date and time of the file's last modification                  |
      | unpbook      | Name of the file                                               |
** Determining a File's Type with file
   + 我们可以用file命令来判断文件类型
     #+begin_src sh
       lvtest@auto-inst:~/tmp$ file printf.c
       printf.c: C source, ASCII text
     #+end_src
** Viewing File contents with less
   + 我们可以使用less来查看text类型的文件, 期间所有的操作和VI一样!, 可以按h来查
     看帮助
     #+begin_src sh
       lvtest@auto-inst:~/tmp$ less printf.c
       WARNING: terminal is not fully functional
       printf.c  (press RETURN)
       #include <stdio.h>

       int main(int argc, char *argv[])
       {
           int ii = 0x01020304;
           int i = 0;
           char* ptr = &ii;
           for (i = 0; i < 4; i++) {
               printf("%x\n", *ptr);
               ptr++;
           }

           return 0;
       }
       printf.c (END)
     #+end_src
** A Guided Tour
   + 我们在移动位置的时候,有很多时候要用到绝对路径,下面就是一些绝对路径的意义
     | Directory     | Comments                                                         |
     | //            | The root directory, where everything begins                      |
     | /bin          | Contains binaries must be present for system to boot and run     |
     | /boot         | Contains Linux Kernel, initial RAM disk image                    |
     |               | /boot/grub/grub.conf->used to configure the boot loader          |
     |               | /boot/vmlinuz, the Linux kernel                                  |
     | /dev          | Contains device nodes, nodes are also file                       |
     | /etc          | Contains system-wide configuration files                         |
     |               | /etc/crontab->defines when automated job will run                |
     |               | /etc/fstab->a table of storage devices and their associated      |
     |               | mount points                                                     |
     |               | /etc/passwd, a list of the user accounts                         |
     | /home         | Every user has one directory in /home                            |
     | /lib          | Contains shared library files used by the core system programs,  |
     |               | like the DLLs in Windows                                         |
     | /lost+found   | Unless somethign really bad has happened to your system, this    |
     |               | directory will reman empty                                       |
     | /media        | On modern Linux system, it will contain the mount pionts for     |
     |               | removable media such as USB, CD-ROM, that are mounted            |
     |               | automatically at insertion                                       |
     | /mnt          | On older Linux systems, /mnt directory conatins mount points     |
     |               | for removable devices that habe been mounted manually            |
     | /opt          | The /opt directory is used to install "optional" software        |
     | /proc         | /proc is not a real filesystem. it is a virtual filesystem       |
     |               | maintained by the Linx kernel. The files are readable and will   |
     |               | give you a picture of how the kernel sees your computer          |
     | /root         | home directory for the root account                              |
     | /sbin         | This directory conains "system" binaries. These are programs     |
     |               | that perform vital system tasks that are generally reserved      |
     |               | for the superuser                                                |
     | /tmp          | Intended for staorage of temporary, transient files.             |
     | /usr          | This directory is likely the largest one on a Linux system. It   |
     |               | contains all the programs and support files used by regular      |
     |               | users                                                            |
     | /usr/bin      | containst the executable programs installed by your Linux        |
     |               | distribution. It is common for this directory to hold thousands  |
     |               | of programs                                                      |
     | /usr/lib      | The shared libraries for the programs in /usr/bin                |
     | /usr/local    | The /usr/local tree is where programs that are not included with |
     |               | your distribution but are intended for system-wide use are       |
     |               | installed. Programs compiled from source code are normally       |
     |               | installed in /usr/local/bin                                      |
     | /usr/sbin     | Contains more system administration programs                     |
     | /usr/share    | /usr/share contains all the shared data used by  programs in     |
     |               | /usr/bin. This includes things like defult configuration files,  |
     |               | icons, screen backgrounds, sound files, etc                      |
     | /usr/share/oc | Most packages installed on the system will include some kind of  |
     |               | documentation files organized by package                         |
     | /var          | With the exception of /tmp and /home, the directories we showd   |
     |               | here keep their content static, in other words, their contents   |
     |               | are not changed. /var directory tree is where data that is       |
     |               | likely to chagne is stored. Various databases, spoll files, user |
     |               | mail, for example                                                |
     | /val/log      | /var/log contains log files, records of various sytem activity.  |
     |               | The most useful one is /var/log/messages, in some system, only   |
     |               | superuser can view log file                                      |
*** Symbolic Links
    + 在ls 的long format里面,如果第一个不是"-"或者"d", 而是"l"的话,就是symbolic links
      #+begin_src sh
        lrwxrwxrwx  1 root root    17 Feb 20  2013 libip4tc.so.0 -> libip4tc.so.0.0.0
      #+end_src



* Manipulating Files And Directories
** Wildcards
   + 因为shell经常使用文件名, 通配符为shell提供了一种快速定位"一组"文件的方法.下
     面是主要通配符
     | Wildcard      | Matches                                                  |
     |---------------+----------------------------------------------------------|
     | *             | Any characters                                           |
     | ?             | Any single character                                     |
     | [characters]  | Any character that is a member of the set characters     |
     | [!characters] | Any character that is not a member of the set characters |
     | [\[:class:]\] | Any character that is a member of the specified class    |
     | [:alnum:]     | Any alphanumeric character                               |
     | [:alpha:]     | Any alphabetic character                                 |
     | [:digit:]     | Any numeral                                              |
     | [:lower:]     | Any lowercase letter                                     |
     | [:upper:]     | Any uppercase letter                                     |
   + 下面是通配符例子
     | Pattern                | Matches                                                      |
     |------------------------+--------------------------------------------------------------|
     | *                      | All files                                                    |
     | g*                     | Any file beginning with g                                    |
     | b*.txt                 | Any file beginning weith b followed by any characters and    |
     |                        | characters and ending with .txt                              |
     | Data??                 | Any file beginning with Data followed by exactly three chars |
     | [abc]*                 | Any file beginning with either a, b, or c                    |
     | BACKUP.[0-9][0-9][0-9] | Any file beginning weith BACKUP. followed by exactly 2 nums  |
     | [\[:upper:\]]*         | Any file beginning with an uppercase letter                  |
     | [![:digit:]]*          | Any file not beginning with a number                         |
     | *[[:lower:]123]        | Any file ending with a lowercase letter or num 1, 2, 3       |
     #+begin_src sh
       lvtest@auto-inst:~/tmp/ttt/wc$ ls *
       12.txt  23.txt  ABC.txt  BACKUP.123  Datafhr  abc.txt  bca.txt  g1.txt  g2.txt
       lvtest@auto-inst:~/tmp/ttt/wc$ ls g*
       g1.txt  g2.txt
       lvtest@auto-inst:~/tmp/ttt/wc$ ls b*.txt
       bca.txt
       lvtest@auto-inst:~/tmp/ttt/wc$ ls Data???
       Datafhr
       lvtest@auto-inst:~/tmp/ttt/wc$ ls [abc]*
       abc.txt  bca.txt
       lvtest@auto-inst:~/tmp/ttt/wc$ ls BACKUP.[0-9][0-9][0-9]
       BACKUP.123
       lvtest@auto-inst:~/tmp/ttt/wc$ ls [[:upper:]]*
       ABC.txt  BACKUP.123  Datafhr
       lvtest@auto-inst:~/tmp/ttt/wc$ ls [![:digit:]]*
       ABC.txt  BACKUP.123  Datafhr  abc.txt  bca.txt  g1.txt  g2.txt
       lvtest@auto-inst:~/tmp/ttt/wc$ ls *[[:lower:]123]
       12.txt  23.txt  ABC.txt  BACKUP.123  Datafhr  abc.txt  bca.txt  g1.txt  g2.txt
     #+end_src
** mkdir-Create Directories
   + mkdir是建立文件夹的命令
     #+begin_src sh
       lvtest@auto-inst:~/tmp/ttt/mk$ ls
       lvtest@auto-inst:~/tmp/ttt/mk$ mkdir dir1 dir2 dir3
       lvtest@auto-inst:~/tmp/ttt/mk$ ls
       dir1  dir2  dir3
     #+end_src
** cp-Copy Files and Directories
   + cp的用法主要就是下面三种
     #+begin_src sh
       lvtest@auto-inst:~/tmp/ttt/mk$ ls
       dir1  dir2  dir3  f1  f2  f3  f4
       lvtest@auto-inst:~/tmp/ttt/mk$ cp f1 f5
       lvtest@auto-inst:~/tmp/ttt/mk$ ls
       dir1  dir2  dir3  f1  f2  f3  f4  f5
       lvtest@auto-inst:~/tmp/ttt/mk$ cp f1 dir1
       lvtest@auto-inst:~/tmp/ttt/mk$ find .
       .
       ./f5
       ./dir3
       ./dir2
       ./f3
       ./f2
       ./f4
       ./f1
       ./dir1
       ./dir1/f1
       lvtest@auto-inst:~/tmp/ttt/mk$ cp f2 f3 f4 f5 dir2
       lvtest@auto-inst:~/tmp/ttt/mk$ find .
       .
       ./f5
       ./dir3
       ./dir2
       ./dir2/f5
       ./dir2/f3
       ./dir2/f2
       ./dir2/f4
       ./f3
       ./f2
       ./f4
       ./f1
       ./dir1
       ./dir1/f1
     #+end_src
   + cp的参数主要有
     | Option            | Meaning                                                   |
     |-------------------+-----------------------------------------------------------|
     | -a, --archive     | Copy the files and directories with all their attributes  |
     |                   | It is default attributes for the user performing the copy |
     | -i, --interactive | If this option is not specified, cp will silently         |
     |                   | overwrite files                                           |
     | -r, --recursive   | Recursively copy directories and their contesnts          |
     | -u, --update      | copy only files that either don't exist or are newer      |
     |                   | than the existing corresponding files in the destination  |
     |                   | directory                                                 |
     | -v, --verbose     | Display informative messages                              |
** mv-Move and Rename Files
   + mv 和copy从参数和使用方面都是一样的.要注意的是,比如, mv a b, 如果a,b在一个
     文件夹下,那么mv就等同于rename了
** rm-Remove Files and Directories
   + rm就是删除某个item.和前面的mv,copy使用方法一样,多了一个"-f, --force"参数,忽
     略文件不存在的提示.
** ln-Create Links
*** Hard links
    + 创建hard link的方法为 ln file link, 注意先写file再写link, hard link只能link
      普通文件,不能link其他, hard link有如下缺点:
      - 不能link其他partition的文件
      - 不能link文件夹
      #+begin_src sh
        lvtest@auto-inst:~/tmp/ttt/hs$ ls
        f1
        lvtest@auto-inst:~/tmp/ttt/hs$ ln f1 hard-link
        lvtest@auto-inst:~/tmp/ttt/hs$ ls
        f1  hard-link
        lvtest@auto-inst:~/tmp/ttt/hs$ ls -al
        total 8
        drwxrwxr-x 2 lvtest lvtest 4096 Feb 27 18:58 .
        drwxrwxr-x 6 lvtest lvtest 4096 Feb 27 18:58 ..
        -rw-rw-r-- 2 lvtest lvtest    0 Feb 27 18:58 f1
        -rw-rw-r-- 2 lvtest lvtest    0 Feb 27 18:58 hard-link
      #+end_src
    + 创建Symbolic Link的方法是ln -s item link, symbolic link不仅仅能link普通文
      件, 也可以link文件夹等.
      #+begin_src sh
        lvtest@auto-inst:~/tmp/ttt/hs$ ls
        f1  hard-link
        lvtest@auto-inst:~/tmp/ttt/hs$ ln -s f1 soft-link
        lvtest@auto-inst:~/tmp/ttt/hs$ ls -al
        total 8
        drwxrwxr-x 2 lvtest lvtest 4096 Feb 27 19:03 .
        drwxrwxr-x 6 lvtest lvtest 4096 Feb 27 18:58 ..
        -rw-rw-r-- 2 lvtest lvtest    0 Feb 27 18:58 f1
        -rw-rw-r-- 2 lvtest lvtest    0 Feb 27 18:58 hard-link
        lrwxrwxrwx 1 lvtest lvtest    2 Feb 27 19:03 soft-link -> f1
      #+end_src
** Let's Build a Playground
   + hard link和symbolic link的区别在于hard link不会创建一个新的inode,而是两个文
     件使用一个inode,使用ls -i可以创建这个inode
     #+begin_src sh
       lvtest@auto-inst:~/tmp/ttt/hs$ ls -li
       total 0
       134897 -rw-rw-r-- 2 lvtest lvtest 0 Feb 27 18:58 f1
       134897 -rw-rw-r-- 2 lvtest lvtest 0 Feb 27 18:58 hard-link
       134898 lrwxrwxrwx 1 lvtest lvtest 2 Feb 27 19:03 soft-link -> f1
     #+end_src


* Working With Commands
** What Exactly Are Commands?
   + 一个命令其实质上可能会是下面四种中的一种:
     - An executable program: 所有的在/usr/bin下面的可执行程序都是这种, which的
       结果就是/usr/bin
     - A command build into the shell itself:是shell自带的. which的结果是空,
       比如cd
     - A shell function
     - An alias: 在其他命令的基础上自己简单改变的命令,比如ll, which ll也是空的

** Identifying Commans
*** type-Display a Command's Type
    + 我们可以用type命令来判断命令的类型:
      #+begin_src sh
        lvtest@auto-inst:~$ type type
        type is a shell builtin
        lvtest@auto-inst:~$ type ls
        ls is aliased to `ls --color=auto'
        lvtest@auto-inst:~$ type cp
        cp is /bin/cp
      #+end_src
*** which-Display an Executable's Location
    + 有时候我们一个可执行程序会有多个版本,which可以判断系统默认的使用哪个, which
      还只能作用在executable程序,对于builtin的程序不管用
      #+begin_src sh
        lvtest@auto-inst:~$ which ls
        /bin/ls
        lvtest@auto-inst:~$ which cd
      #+end_src
** Getting a Command's Documentation
*** help-Get Help for Shell Builtins
    + help + buildin command的话可以查看其文档
      #+begin_src sh
        lvtest@auto-inst:~$ help cd
        cd: cd [-L|[-P [-e]]] [dir]
            Change the shell working directory.

            Change the current directory to DIR.  The default DIR is the value of the
            HOME shell variable.

            The variable CDPATH defines the search path for the directory containing
            DIR.  Alternative directory names in CDPATH are separated by a colon (:).
            A null directory name is the same as the current directory.  If DIR begins
            with a slash (/), then CDPATH is not used.

            If the directory is not found, and the shell option `cdable_vars' is set,
            the word is assumed to be  a variable name.  If that variable has a value,
            its value is used for DIR.

            Options:
                -L  force symbolic links to be followed
                -P  use the physical directory structure without following symbolic
                links
                -e  if the -P option is supplied, and the current working directory
                cannot be determined successfully, exit with a non-zero status

            The default is to follow symbolic links, as if `-L' were specified.

            Exit Status:
            Returns 0 if the directory is changed, and if $PWD is set successfully when
            -P is used; non-zero otherwise.
      #+end_src
*** --help-Display Usage Information
    + buildin的可以使用help,那么如果是executable的话,help就不管用了,但是默认这种
      命令会加一个--help参数(executable最开始都是c语言写的,c语言自然对于位于自己exe
      后面的参数,当然好分析了)
      #+begin_src sh
        lvtest@auto-inst:~$ type mkdir
        mkdir is /bin/mkdir
        lvtest@auto-inst:~$ help mkdir
        bash: help: no help topics match `mkdir'.  Try `help help' or `man -k mkdir' or `info mkdir'.
        lvtest@auto-inst:~$ mkdir --help
        Usage: mkdir [OPTION]... DIRECTORY...
        Create the DIRECTORY(ies), if they do not already exist.

        Mandatory arguments to long options are mandatory for short options too.
          -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask
          -p, --parents     no error if existing, make parent directories as needed
          -v, --verbose     print a message for each created directory
          -Z, --context=CTX  set the SELinux security context of each created
                              directory to CTX
              --help     display this help and exit
              --version  output version information and exit

        Report mkdir bugs to bug-coreutils@gnu.org
        GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
        General help using GNU software: <http://www.gnu.org/gethelp/>
        Report mkdir translation bugs to <http://translationproject.org/team/>
        For complete documentation, run: info coreutils 'mkdir invocation'
      #+end_src
*** man-Display a Program's Manual Page
    + 对于buildin的命令,前置的查看方法是help cmd,对于executable(开始都是c语言写
      的)来说,前置的查看方法是man ls
    + 由于一个executable通常都是c语言写的,而这些命令都有c语言的相应函数(甚至是system
      call),所以我们有如下的常用默认显示类别
      | Section | Contents                                       |
      |---------+------------------------------------------------|
      |       1 | User commands                                  |
      |       2 | Programming interfaces for kernel system calls |
      |       3 | Programming interfaces to the C library        |
      |       4 | Special files such as device nodes and drivers |
      |       5 | File formats                                   |
      |       6 | Games and amusements such as screensavers      |
      |       7 | Miscellaneous                                  |
      |       8 | System administration commands                 |
    + 类别的使用方法是把类别序号放在man和cmd之间
      #+begin_src sh
        lvtest@auto-inst:~$ man 5 passwd
        PASSWD(5)                File Formats and Conversions                PASSWD(5)
      #+end_src
*** apropos-Display Appropriate Commands
    + 可以看成是bash的google
      #+begin_src sh
        lvtest@auto-inst:~$ apropos mkdir
        mkdir (1)            - make directories
        mkdir (2)            - create a directory
        mkdirat (2)          - create a directory relative to a directory file descri...
      #+end_src
*** whatis-Display a Very Brief Description of a Command
    + whatis 就是bash的百度百科
      #+begin_src sh
        lvtest@auto-inst:~$ whatis ls
        ls (1)               - list directory contents
      #+end_src
** Creating Your Own Commands with alias
   + 我们可以使用alias来重新组合一个命令
     #+begin_src sh
       lvtest@auto-inst:~$ alias foo='cd /usr; ls; cd -'
       lvtest@auto-inst:~$ which foo
       lvtest@auto-inst:~$ type foo
       foo is aliased to `cd /usr; ls; cd -'
       lvtest@auto-inst:~$ foo
       bin  games  include  lib  local  sbin  share  src
       /home/lvtest
     #+end_src
   + 使用unalias来去掉这个命令的alias
     #+begin_src sh
       lvtest@auto-inst:~$ unalias foo
       lvtest@auto-inst:~$ type foo
       bash: type: foo: not found
     #+end_src
   + 使用alias不加参数的话,会列举系统上面所有的alias
     #+begin_src sh
       lvtest@auto-inst:~$ alias
       alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
       alias egrep='egrep --color=auto'
       alias fgrep='fgrep --color=auto'
       alias grep='grep --color=auto'
       alias l='ls -CF'
       alias la='ls -A'
       alias ll='ls -alF'
       alias ls='ls --color=auto'
     #+end_src
   + alias命令只有在当前shell的生命期内有用,一旦关掉当前的terminal,这次alias的就
     消失了.
* Redirection
** Standard Input, Output, and Error
   + bash程序都会和standard input,output,error相关联的,比如ls就是把结构发送到
     standard output和standard error的.
*** Redirecting Standard Output
    + 我们是通过>将standard output转移到>指向的"文件"(从头开始,会覆盖以前的内容)
      #+begin_src sh
        bash-3.2$ ls /usr/bin/ > ls-output.txt
        bash-3.2$ ls -l ls-output.txt
        -rw-r--r--  1 hfeng  staff  8911 Mar  4 20:43 ls-output.txt
        bash-3.2$ ls /usr/bin/ > ls-output.txt
        bash-3.2$ ls -l ls-output.txt
        -rw-r--r--  1 hfeng  staff  8911 Mar  4 20:43 ls-output.txt
      #+end_src
    + 我们是通过>>将standard output叠加转移到>指向的"文件"(从尾开始,会保留以前的内容)
      #+begin_src sh
        bash-3.2$ ls /usr/bin/ >> ls-output.txt
        bash-3.2$ ls /usr/bin/ >> ls-output.txt
        bash-3.2$ ls /usr/bin/ >> ls-output.txt
        bash-3.2$ ls -l ls-output.txt
        -rw-r--r--  1 hfeng  staff  26733 Mar  4 20:44 ls-output.txt
      #+end_src
*** Redirecting Standard Error
    + 如果是redirect standard Error就稍微有点拐弯了,要借助file descriptor的概念,
      一个程序产生的输出会输出到三个"文件"上面,他们也默认拥有前三个file descriptor:
      0,1,2分别代表:stin, stdout, sterr,所以把sterr导入到某个文件的方法如下(注意
      2和>是在一块的):
      #+begin_src sh
        bash-3.2$ ls -l /bin/usr 2> ls-error.txt
        bash-3.2$ cat ls-error.txt
        ls: /bin/usr: No such file or directory
      #+end_src
*** Redirecting Standard Output and Standard Error to One File
    + 有如下两种方法:
      - 传统的方法,要转两次,利用了stdout的file descriptor为1
        #+begin_src sh
          bash-3.2$ ls -l /bin/usr > ls-output.txt 2>&1
          bash-3.2$ cat ls-output.txt
          ls: /bin/usr: No such file or directory
        #+end_src
      - 新版本bash支持如下方法(更简介)
        #+begin_src sh
          bash-3.2$ ls -l /bin/usr &> ls-output.txt
          bash-3.2$ cat ls-output.txt
          ls: /bin/usr: No such file or directory
        #+end_src
*** Disposing of Unwanted Output
    + 如果我们不想要某些输出,我们可以redirect它们到一个特殊的文件
      #+begin_src sh
        bash-3.2$ ls -l /bin/usr 2> /dev/null
      #+end_src
*** Redirecting Standard Input
    + 我们用">"把stdout转移到一个文件,其实我们还可以使用"<"把文件内容作为standard
      input,如下
      #+begin_src sh
        bash-3.2$ cat > lazy_dog.txt
        The quick brown fox jumped over the lazy dog.
        bash-3.2$ cat lazy_dog.txt
        The quick brown fox jumped over the lazy dog.
        bash-3.2$ cat < lazy_dog.txt
        The quick brown fox jumped over the lazy dog.
      #+end_src
    + 我们可以看到这里使用"<"和不使用"<",是没有什么区别的.但是也说明了<的作用.
** Pipelines
   + 管道是bash的重要概念,我们可以通过"|"把一个程序的stout redirect到另一个
     程序的stdin
     #+begin_src sh
       bash-3.2$ ls -l /usr/bin | less
     #+end_src
*** Filters
    + 我们还可以在管道中间进行一些filter操作,比如sort一下
     #+begin_src sh
       bash-3.2$ ls -l /usr/bin | more | less
     #+end_src
*** uniq-Report or Omit Repeated Lines
    + uniq是和sort配合最多的一个程序,它把重复的行只显示一次, 而加了-d参数以后,就
      是只显示那些重复的行
      #+begin_src sh
        bash-3.2$ cat test.txt
        a
        n
        c
        n
        c
        n
        1
        2
        3
        4
        bash-3.2$ cat test.txt | sort | uniq
        1
        2
        3
        4
        a
        c
        n
        bash-3.2$ cat test.txt | sort | uniq -d
        c
        n
      #+end_src
*** wc-Print Line, Word and Byte Counts
    + wc会显示文件的1行数2word数3byte数
      #+begin_src sh
        bash-3.2$ wc test.txt
              10      10      20 test.txt
      #+end_src
    + 我们可以用前面学过的几个参数来统计我们总共有多个个executable程序在/usr和
      /usr/bin下面
      #+begin_src sh
        bash-3.2$ ls /bin /usr/bin | sort | uniq | wc -l
            1078
      #+end_src
*** grep-Print Lines Matching a Pattern
    + grep是一个强大的命令,其主要就是"KMP"查找字符串,其使用格式是(注意如果没有
      files的话,那么就是grep stin了)
      #+begin_example
        grep pattern [file...]
      #+end_example
    + grep的一个简单应用(-i ignore -v反向输出,等复杂的以后再研究)
      #+begin_src sh
        bash-3.2$ ls /usr/bin | sort | uniq | grep zip
        bunzip2
        bzip2
        bzip2recover
        funzip
        gunzip
        gzip
        unzip
        unzipsfx
        zip
        zipcloak
        zipdetails
        zipdetails5.16
        zipgrep
        zipinfo
        zipnote
        zipsplit
      #+end_src
*** head/tail-Print First/Last Part of Files
    + head 可以看文件的前n(n可以指定默认是10)行, tail反之
      #+begin_src sh
        bash-3.2$ head -n 5 ls-output.txt
        2to3
        2to3-
        2to3-2.7
        2to32.6
        BuildStrings
        bash-3.2$ tail -n 5 ls-output.txt
        zipsplit
        zless
        zmore
        znew
        zprint
      #+end_src
    + tail更重要的一个功能是在-f之后看log
      #+begin_src sh
        bash-3.2$ tail -f /var/log/appstore.log
                "os_updates_to_install_on_restart" = "";
                result = pass;
                "user_initiated" = no;
                "will_restart" = no;
            }
        Mar  4 20:29:34 hair.lan storeagent[263]: SoftwareMap: Software map rebuild took 0.0856 seconds for 0 records and produced: {
            }
        Mar  4 20:29:34 hair.lan storeagent[263]: AutoUpdateOperation: Released BackgroundTask power assertion (returned 0)
        ......
      #+end_src
*** tee-Read from Stdin and Output to Stdout and Files
    + tee其实是提供了一种"T"型的管道,就是结果不仅仅是传递给tee后面指定的文件,而且
      同时传递给了stdout(这样可以让管道继续叠加下去)
      #+begin_src sh
        bash-3.2$ ls /usr/bin | grep zip | tee out-grep.txt | grep un
        bunzip2
        funzip
        gunzip
        unzip
        unzipsfx
        bash-3.2$ cat out-grep.txt
        bunzip2
        bzip2
        bzip2recover
        funzip
        gunzip
        gzip
        unzip
        unzipsfx
        zip
        zipcloak
        zipdetails
        zipdetails5.16
        zipgrep
        zipinfo
        zipnote
        zipsplit
      #+end_src
