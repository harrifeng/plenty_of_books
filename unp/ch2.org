#+OPTIONS:^:{}
* Chapter 2: The Transport Layer: TCP, UPD, and SCTP
** Introduction
** The Big Picture
   + tcpdump: 是一个直接与datalink沟通的工具, Linux下面其实还有一种socket与
     datalink练习的socket,叫做SOCK_PACKET
   + traceroute: 用了两个sockets: 一个是IP,另一个是ICMP
   + SCTP: 是一个新的网络协议, 可以用IPv4或者IPv6
   + ICMP: 处理错误和控制信息
   + IGMP: 处理multicasting的,已经不怎么用了
   + ARP: IP地址-->MAC地址
   + RARP: MAC地址-->IP地址
   + ICMPv6: 是IPv6里面全面替代ICMPv4, IGMP, 以及ARP
** User Datagram Protocol (UDP)
   + UDP是网络层协议, 不能保证传输的成功,因为它没有保证传输可靠性的方法, 需要
     应用层来保证
   + TCP是一个byte-stream的协议,没有任何边界的概念, 但是UDP有,每个UDP都有长度,
     都会最后传输给对方
   + UDP比较自由,不要维护relation, 它可以发送一个socket给serverA, 然后马上发送
     同一个socket给serverB.
** Transmission Control Protocol (TCP)
   + TCP提供了传输的可靠性: 并不是说用TCP一定能把数据传输给对方, 而是如果能传输数据
     就传输,如果传输不成功,也能报错.
   + TCP还有自己的算法来计算RTT(round-trip time) : 也就是client和server之间的
     传输一次的时间.
   + RTT这个时间是根据当前网络状况和距离而设定的, 并且是不停计算的
   + TCP还会记录序列, 发送的时候可能序列是123, 到达的时候就乱了.接收方的TCP 会把所有
     的TCP segment重新排列(如果有收到重传的segment,也会智能丢弃).
   + TCP还提供流量控制: TCP一直告诉对方自己能够接受多少的数据,这叫advertised window.
   + 这个windows就是接收方能够提供的最大的内存空间.这个数字是不停改变的,刚接受来肯定
     数字变小, 处理一会肯定数字变大. 窗口数字也是可以变成0的,如果接收方处理不过来,当然
     要停止你的传输
   + TCP是全双工的,也就是说,传输是双方向的,并不是叫server就不接受,叫client就不发送.
     当然某个方向的传输停止也是可以自由决定的.
** Stream Control Transmission Protocol (SCTP)
   + SCTP提供了一种client和server之间的association, 之所以叫association而不是叫
     connection是因为:因为connection是两个IP之间的联系,而SCTP是两个系统之间的联系
     不仅仅是两个IP
   + 在消息传递上面,SCTP更像UDP,它把每个记录的长度都传输给了对方
   + SCTP支持两个端之间的多个stream, 其中一个stream如果丢失了一个数据的话,不会影响
     其他stream. 这个和TCP不一样,TCP一个byte丢失就要影响以后的传输(因为要重新排序)
   + SCTP特性还有:单个SCTP端点支持多个IP地址. TCP也可以在其他路由协议的支持下获得
     这种特性
** TCP Connection Establishment and Termination
   + TCP建立连接的时候通常有如下的过程:
     1) 服务器必须首先准备好, 通过socket, bind和listen这三个函数,我们把这三个函数的
        过程叫:被动打开(passive open)
     2) 客户端自然就是主动打开(active open) : 客户发送一个没有数据的SYN segment,
        里面只有一个序列号, 就是三次握手建立以后客户端发送的第一个数据的序号(假设为J)
     3) 服务器必须确认(ACK)序号为J的SYN, 同时发送自己在这次握手后发送的第一个数据的
        序号(假设为K), 这个ACK和SYN都是在一个segment中发送的
     4) 客户端要确认服务器的序号为K的SYN
     5) 因为 2,3,4三步中要有三个segment才能完成连接的建立,所以这个过程叫做三次握手
   + 三次握手图解, 我们可以看到ACK返回的是J+1这是因为SYN本身会占用一个序列号, J是当前
     序列号,那么等连接建立,下次发送的就是J+1了
     #+begin_example
                      client                       server
          socket()      |      SYN(J)                |socket(), bind(), listen()
                        |                            |
       connect() blocks +--------------------------->|accept() blocks
                        |    SYN(K), ACK(J+1)      / |
       connect() returns|<-------------------------/ |
                        |\    ACK(K+1)               |
                        | \------------------------->|accept() returns
                        |                            |read() blocks
                        |                            |
     #+end_example
*** TCP Options
    + MSS: 在传输SYN的同时,发送自己的最大segment的大小(Maximum Segment Size)
    + Windows scale: TCP向对方展示的最大窗口数目为65535(相应的头部只有16bit), 但是
      现在的网络速度要远远大于这个数目, 所以需要一个新的参数Windows scale来成倍扩展
      窗口大小. scale是0到14,表示窗口数目左移多少位最大窗口数目现在是1GB(65535*2^14)
    + Windows scale是一个新的选项,老的TCP实现不支持,所以只有client发送了这个选项,
      并且对方server回应了这个选项,我们才能使用. 同样的,server端只有在client发给了
      你这个选项,你才能回应这个选择.
    + Timestamp: 这个选项对于高速传输时可能产生的数据破坏修复(比如迟到的segment,重复的
      segment)很有意义.
*** TCP Connection Termination
    + 建立一个连接需要三次握手, 终止一个连接则需要四次挥手:
      1) 某个应用(服务器端或者客户端都可以, 全双工嘛,两边都一样)首先调用close, 我们称之为
         主动关闭(active close). 这边的TCP主动发送一个FIN segment,表示自己传完了
      2) 接受到FIN的对端执行被动关闭(passive close), 这个FIN会被TCP确认(发送一个ACK)
         同时还会把收到FIN的消息(在当前所有数据之后,加上EOF的方式)传送给上层应用程序
      3) 过了一段时间以后,刚才接受FIN的端,也没有啥东西可传了,就会发送自己的FIN给对方
      4) 对方TCP接受到这个最后的FIN之后,也会发送一个ACK给对方确认的.
    + 四次挥手只是"最多四次", 有些情况下用不了四次:
      - 上面的1FIN可能随着数据一块发过去
      - 上面的2ACK,3FIN可能会在一个segment发过来
      - 上面2和3之间, 被动关闭的那一端还是可以传数据给主动关闭那一端的,只是反过来不行了,
        这个叫做半关闭(half close)
    + TCP四次挥手图解(close()可以释放FIN,同时exit或者非正常中断也会发送)
      #+begin_example
                       client                       server

                         |    FIN(M)                  |
              close()    +--------------------------->|read() return 0 (eof)
                         |    ACK(M+1)              / |
        connect() returns|<-------------------------/ |
                                   ........

                         |    FIN(N)                  |
                         |<---------------------------+close()
                         |\    ACK(N+1)               |
                         | \------------------------->|
                         |                            |
                         |                            |

      #+end_example
*** TCP State Transitiion Diagram
  + 如下的为TCP的状态转换图---为客户端,===为服务器端
    ,#+begin_example
                                                   starting point
                                                   +------------+<==========================================================+
                                                   | CLOSED     |=====================================+                     |
                                                   +-----+------+                 appl:active open    |                     ^
                                                         | appl:passive open      send:SYN            v                     |
                                                         v send:nothing                               |                     ^
               recv:SYN  send:SYN,ACK              +------------+                                     v                     |
             +-------------------------------------| LISTEN     |                                     |                     ^
             |  +=================================>+------------+                                     |                     |
             v  | recv:RST                                                                            v                     ^
      +------------+                             recv:SYN                                       +------------+ appl:close   |
      | SYN_RECVD  |<===========================================================================| SYN_SENT   |=============>+
      +------+-----+                             send:SYN, ACK                                  +-----+------+ or timeout   |
       send: | recv:ACK                       [[simultaneous open]]                 recv:SYN, ACK     |                     ^
      nothing|                                                                     +==================+                     |
             |                                                                     | send:ACK                               ^
             |                                     +------------+<=================+            +------------+              |
             +------------------------------------>| ESTABLISHED|------------------------------>| CLOSE_WAIT |              ^
                                                   +------------+ recv:FIN send:ACK             +------------+              |
                appl:close send:FIN                      |                                            |appl:close           ^
             +===========================================+                                            |send:FIN             |
             |                                                                                        |                     ^
             v                                  [[simultaneous close]]                                v                     |
      +------------+ recv:FIN send:ACK             +------------+                               +------------+ recv:ACK     ^
      | FIN_WAIT_1 |==============================>| CLOSING    |                               |LAST_ACK    |------------->+
      +------+-----+==========+                    +-----+------+                               +------------+ send:nothing |
             |                |                          |                                                                  ^
             v recv ACK       |recv:FIN, ACK             | recv:ACK                                                         |
             | send nothing   |send:ACK                  | send:nothing                                                     ^
             v                |                          |                                                                  |
      +------------+          +===================>+-----+------+         2*MSL timeout                                     ^
      | FIN_WAIT_2 |==============================>| TIME_WAIT  |==========================================================>+
      +------------+ recv:FIN send:ACK             +------------+
    ,#+end_example
  + 上面的各种state就是netstat能够显示的状态,其中有两种很少见的情况我们从没有讨论过:
    - 同时打开(simulataneous open) : 两端几乎同时发送SYN
    - 同时关闭(simulataneous close): 两端几乎同时发送FIN
*** Watcing the Packets
    + 我们把客户端和服务器都在一起考虑,就会得到下面的图例
      #+begin_example
                            Client                               Server
              connect(blocks) | SYN(j), MSS=536                     | LISTEN(passive open), accept(blocks)
        SYN_SENT(active open) +------------------------------------>+ SYN_RCVD
                              |                                    /|
                              | SYN(K), ACK(J+1), MSS=1460        / |
            ESTABLISHED       +<---------------------------------+  |
            connect returns   | \                                   |
                              |  \   ACK(K+1)                       |
                              |   +-------------------------------->+ ESTABLISHED, accept returns, read (blocks)
                              |                                     |
                              |       data(request)                 |
                      write   +------------------------------------>+ read returns
                read(blocks)  |                                    [server process request]
                              |                                     |
                              |                                     +
                              |                                    /|write, read(blocks)
                              |    data(reply), ACK of request    / |
                read returns  +<---------------------------------+  |
                              |\                                    |
                              | \  ACK of reply                     |
                              |  +--------------------------------->+

                              |    FIN(M)                           |
           close   FIN_WAIT_1 +------------------------------------>+ CLOSE_WAIT (passive close), read returns 0
                              |                                    /|
                              |    ACK(M+1)                       / |
                   FIN_WAIT_2 +<---------------------------------+  |
                              |                                     |
                              |    FIN(N)                           |
                   TIME_WAIT  +<------------------------------------+ close,LAST_ACK
                              |\                                    |
                              | \  ACK(N+1)                         |
                              |  +--------------------------------->+ CLOSED
      #+end_example
    + 客户端的MSS是536,而服务器是1460, 两边的窗口不一样大是没问题的
    + 上面传输数据的时候,服务器的对客户端数据请求的应答,是和数据一块传给客户端的
      ,这个叫做piggybacking(捎带应答), 这个是因为server在200ms以内就处理了请求,
      所以第一个返回的segment里面就ACK了request, 如果时间太久,那就会让segment
      先走,在后面的segment里面来ACK
    + 发起主动关闭(active close)的端(这里是客户端)最后进入了TIME_WAIT,因为它要
      保证最后一个ACK(N+1)丢失了能够重发,所以要等待2MS的时间
** TIME_WAIT State
   + 在上图中最令人迷惑的状态就是TIME_WAIT, 它要经过两倍的MSL(maximum segment
     lifetime)的时间才能转成关闭状态
   + 我们先来看看MSL,他是一个ip数据报能够在网络上存活的时间,ip数据报有一个跳跃
     极限(hop limit): hop字段的长度为255bit,也就是说ip在路由器间传递超过255次
     就自动被丢弃了(有可能有循环产生).
   + 根据前面的背景知识,我们至少有两个理由来维持两倍的MSL:
     1) 假设我们在12.106.32.254:1500 和206.168.112.219:21之间建立了一个TCP
        连接,之后关闭它. 过一段时间后,我们用同样的IP和端口对再建立一次连接, 后
        一个连接称之为前一个连接的化身(incarnation), TCP必须避免新的连接受到老
        的连接重复分组(lost duplicate, 也就是超时重传后,丢失的又通过路由修复
        传回来了)的干扰,我们设置了两倍MSL,保证老的重复分组已经在网络上丢弃了
     2) 我们上一节说道了主动close的客户端会保留TIME_WAIT长达2MS的时间,因为如果
        最后一个ACK(N+1)丢失了的话,server端超市会重发FIN(N), 客户端要保证自己
        还在这个connection, 然后重新发送ACK(N+1)
** SCTP Association Establishment and Termination
** Port Number
** TCP Port Numbers and Concurrent Servers
** Buffer Sizes and Limitations
** Standard Internet Services
** Protocol Usage by Common Internet Applications
