#+OPTIONS:^:{}
* Chapter 1: Introduction
** Introduction
   + Web server是长期运行的程序, 而Web client(比如浏览器)就是发出请求的程序.
   + 一般来说,都是client端发送请求, 也有异步回调(asynchronous callback)通信,是
     server端先发起的.
** A Simple Daytime Client
   + 下面是一个简单的请求时间和日期的client
     #+begin_src c
       /*************************/
       /* intro/daytimectpcli.c */
       /*************************/
       
       include "unp.h"
       
       int main(int argc, char *argv[])
       {
           int                 sockfd;
           int                 n;
           char                recvline[MAXLINE + 1];
           struct sockadr_in   servaddr;
       
           if (argc != 2) {
               err_quit("usage: a.out <IPaddress>");
           }
       
           if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
               err_sys("socket error");
           }
       
           bzero(&servaddr, sizeof(servaddr));
           servaddr.sin_family = AF_INET;
           servaddr.sin_port = htons(13);    /* daytime server port */
           if (inet_pton(AF_INET, argv[1], &servaddr.sin_addr) <= 0) {
               err_quit("inet_pton error for %s", argv[1]);
           }
           /**********************************************/
           /* in unp.h, #define SA to be struct sockaddr */
           /**********************************************/
           if (connect(sockfd, (SA *) &servaddr, sizeof(servaddr)) < 0) {
               err_sys("connect error");
           }
       
           while ((n = read(sockfd, recvline, MAXLINE)) > 0) {
               recvline[n] = 0;
               if (fputs(recvline, stdout) == EOF) {
                   err_sys("fputs error");
               }
           }
           if (n < 0) {
               err_sys("read error");
           }
           return 0;
       }
     #+end_src
   + 使用方法:
     #+begin_src sh
       ~/test/unpbook/intro$ ./daytimetcpcli 127.0.0.1
       Wed Nov 20 14:33:08 2013   
     #+end_src
   + socket 函数创建一个socket, 其返回参数为sockfd, 其参数为AF_INET表示为IPv4, 
     SOCK_STREAM表示为TCP socket
   + 后面我们就创建一个socket的数据结构(类型为struct sockadr_in), 我们使用bzero
     这个函数把整个数据结构全部清零.
   + servaddr(类型为struct sockadr_in)是整个函数的重点, 在用bzero清零以后,后面
     是给他的每个部分赋值的过程 
     1) sin_family
     2) sin_port
     3) 使用inet_pton函数把一个AF_INET类型ip地址, 转换成合适的格式,然后赋值给sin_addr
   + connect函数通过第二个参数来知道要连接哪个地址(第三个长度起辅助作用),然后把server
     返回的结果都返回给第一个参数
   + 通过read函数来读取connect带来的结果. daytime server的返回值都是26个bytes,
     但是根据网络情况的不同,这些bytes可能通过不同数量的TCP segment返回., 所以我们得
     用while来接收.然后把recvline最后一个赋值成0 (因为TCP里面的字符串不是c语言字符串,
     没有以NULL结尾)
** Protocol Independence
   + 我们上面的例子使用的是IPV4的IP地址, 如果使用IPV6的IP地址,那么就用sockaddr_in6
     替换上面例子的sockaddr_in
   + 同时AF_INET ==> AF_INET6
   + sin_family ==> sin6_port
   + sin_port ==> sin6_port
   + sin_addr ==> sin6_addr
** Error Handling: Wrapper Function
   + 老是测试返回值是不是0,太麻烦了,所以设计了wrapper function,特点是另外设计一些函数
     首字母大写,里面测试返回值是不是0, 我们以socket函数为例.
     #+begin_src c
       sockfd = socket(AF_INET, SOCK_STREAM, 0);
       int Socket(int family, int type, int protocol) {
           int n;
           if ((n = socket(family, type, protocol)) < 0) {
               err_sys("socket error");
           }
           return (n);
       }
     #+end_src
   + 在Unix函数里面如果出现了错误, 那么一个全局变量errno就会被设置成一个正数, 同时函数返回
     负数-1. 我们的err_sys函数就是通过查看errno,并且打印error错误
** A Simple Daytime Server
   + 我们再来看看server端如何写:
     #+begin_src c
       /**************************/
       /* intro/daytimetcpsrv.c  */
       /**************************/
       #include "unp.h"
       #include <time.h>
       
       int main(int argc, char *argv[])
       {
           int       listenfd;
           int       connfd;
           char      buff[MAXLINE];
           time_t    ticks;
       
           listenfd = Socket(AF_INET, SOCK_STREAM, 0);
       
           bzeros(&servaddr, sizeof(servaddr));
           servaddr.sin_family = AF_INET;
           servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
           servaddr.sin_port = htons(13); /* daytime server port */
       
           Bind(listenfd, (SA*) &servaddr, siezeof(servaddr));
           /**********************************************************/
           /* LISTENQ is from unp.h, it specifies the maximum number */
           /* of client connections that kernel will queue for this  */
           /* listening descriptor                                   */
           /**********************************************************/
           Listen(listenfd, LISTENQ);
       
           for ( ; ;) {
               connfd = Accept(listenfd, (SA*)NULL, NULL);
       
               ticks = time(NULL);
               snprintf(buff, sizeof(buff), "%.24s\n\n", ctime(&ticks));
               Write(connfd, buff, strlen(buff));
               Close(connfd);
           }
           return 0;
       }
     #+end_src
   + Socket函数首先建立一个socket
   + bzeros初始化socket的数据结构servaddr, 然后给各部分赋值, 和client程序一样, 
     sin_family和sin_port被赋了AF_INET和htons(13)
   + 而sin_addr.s_addr在client是仅仅赋值了目标server的值(通过a.out的第二个参数得到),
     这里却赋值INADDR_ANY, 这是为了让server接受来自本机任意一个网卡的数据(因为一个host
     可能有多个网卡)
   + client的socket数据结构赋值完之后,就是connect,然后read, server的操作要多一点
   + server端和client的connect相似的命令是bind: 都是把socket和socket数据结构联系
     起来
   + bind之后,就用listen函数,就把一个socket变成了listening socket
   + TCP使用的是三次握手协议来建立连接, accept函数返回的时候,就是三次握手成功完成的时候,
     accept函数的返回值是一个新的descriptor,叫做connected descriptor. server会同时
     接受多个client的请求,server会给每个client一个connected descriptor
   + 时间经过字符串处理以后,通过Write发送给connfd
** Roadmap to Client/Server Examples in the Text
** OSI Model
** BSD Networking History
** Test Networks and Hosts
** Unix Standards
** 64-Bit Architectures   
