#+OPTIONS:^:{}
* Chapter 1: Introduction
** Architectural Principles
*** Packets, Connections, and Datagrams
    + 1960年代之前，网络就是指的电话网络，电话网络的特点是，连接两个节点的整条线
      路是独占的：打电话即便你什么话也不说，也是要收费的。
    + 之后最为重要的发明就是packet switching:一小组(chunk)大概几个Byte的数据独
      立在网络中传递.
    + 从不同的发送方和接收方的不同组(chunk)的数据可以一开始先混合,然后到达终点再分开,
      这种传递方法也叫多路复用(multiplexing). 这极大的提高了网络的利用率
    + 这些独立的组(chunk)数据,还可以经过不同的路径到达目的地.这提高了数据传输的弹性,
      偶然的某些物理线路损坏可能不会导致最后的传输失败.
    + 在路由器收到这些packet的时候，首先是存在自己的内存里面，然后按照先来先服务
      (FIFO)的策略进行转发.而且会根据包的目的地以及计时模式的不同来进行packet的重新
      组装.
    + 统计复用(statistical multiplexing)的缺点就是没有可预见性,就像高速公路上的车
      都可以随意变道(四车道三车道都用来开一个方向),线路有时候会非常繁忙.
    + 统计复用的这些缺点,可以用分时复用或者静态复用来改变,但是分时或者静态复用就意味着
      线路的利用率不够高(高速公路总是两个方向各两条,但很多时候只有一个方向繁忙)
    + 能够继承circuits并且不依靠物理连接的virtual circuits [X.25]在1990年之前非常
      流行,后来被DSL(digital subscriber line)所替代.
    + 在virtual circuits之前,每个路由器都需要保留每一个connection的信息.因为每个packet
      的状态信息非常之少. 这种特质要求在真正传递数据之前,在数据经过的路上,所有的路由器都已经
      做好准备了,而且在数据传输完成之后的清理工作也要做.(都是通过复杂的signal 协议完成的) 
      这就是原来的connection-oriented 网络.
    + 在virtual circuits之前,不管是不是真实的circuits, 它们都是connection-oriented
      的. connection-oriented和connectionless-oriented是网络发展的两个阶段.后面
      我们会看到TCP就是connectionless的网络啦.
    + 后来,packet的模式得到了改变,把源头和目的地都写进了每一个的packet,就叫做datagram了,
      新的packet的组织方式势必会增加每个packet的负担,但是每个路由器里面的connection的信息
      就不用保存了.前面为了提前建立这些个信息的signaling复杂协议就不需要了. 这也就是我们现在
      看到的connectionless协议啦!
    + 需要注意的是,一般情况下协议都会记住不同组(chunk)数据的大小,但是circuit和VC却可能不记录
      这些信息,考虑到我们不会用这些协议了.记住就可以.
*** The End-to-End Argument and Fate Sharing
    + 当我们进行大型的项目(比如操作系统或者协议簇)设计的时候,有一个问题经常会被提
      起,那就是一个特性究竟要在哪里实现.在TCP/IP设计的时候,影响它最深的,就是
      "边缘论(end-to-end argument)"
    + 所谓边缘论, 现在我的理解是那些无法确定放在哪里的特性,肯定是要再end point的
      应用的帮助下,才能完整的正确的实现,所以这些特性是不适合放在协议里面实现的
    + 简言之,底层的协议,可以提供一些便利,但是底层协议无法百分之百的猜对应用的需求,
      在TCP/IP的设计中,底层就只是为应用提供了一些便利,但是重要的特性(错误处理,
      加密,传输确认等)都不是是在底层提供的
    + 边缘论的采用让TCP/IP的设计变成了"傻瓜的网络"(这个网络应该是指的传输中的线路
      包括路由器等)和"智能的系统", 所有的重要函数(错误处理,加密,传输确认)都是在
      end端,也就是应用所在的地方完成的
    + 以边缘论为理论依据,在选择函数在哪里实现这个问题上,又引入了叫做命运共享(Fate 
      sharing)的理论.也就是"一荣俱荣,一损俱损":只有能够破坏一个或者多个end point
      的错误,才能说是破坏了整个通信
    + 命运共享的理论让TCP实现的Virtual connection能够在网络出错了一段时间的情况
      下,依然保持active
*** Error Control and Flow Control
    + 有些情况下,网络上的数据传输会出现错误,也就是bit出现反置, 这是很正常的,最常见
      的原因就有:
      - 硬件出错
      - 辐射
      - 无线网络离开了它的辐射范围
    + 出错以后,就要考虑错误处理了. 在网络上,这叫error control. 由于我们的TCP的设计
      理念(边缘论, 命运共享), 我们会吧error control实现在application里面.
    + 通常情况下,如果错误的bit不多,那么可以引入mathematical codes去改正他们.如果
      出错的地方太多就只有重传了.
    + 在前TCP时代(也就是前面说的circuit-switched等等), 重传是在网络上完成的,这就
      意味着,如果出错,网络上负责给你整理正确,保证end端接受到的都是按照顺序来的, 没有
      错误的. 但是其实end端有时候不喜欢你给我传来这么好的数据, 因为第一他不在乎你吗传
      过来的顺序,因为顺序不对application可以自己整理, 第二传过来这样整齐的数据意味
      着要消耗大量的资源,本来这些资源我是不需要耗费的. 这个例子就是前面边缘论的一个
      反例--在网络上不要做过多的假设, 因为你不知道应用层需要什么.
    + 在TCP时代,替代这种严格按顺序传输的方法叫做best-effort delivery.
    + best-effort delivery不会用太多的精力去确保数据完整正确传输, 错误的发现通常
      是使用校验和, 而且一旦发现错误,整个datagram就直接抛弃,然后重传了.
    + 如果best-effort delivery成功了, 那么发送者的速度会快过接受者. 这个时候,需要
      flow control机制来控制, 这个flow control不是在网络上的,而是在end端应用层里
      面的.
      - 这个和边缘论一致的, 在end端控制速度
      - 这个和命运共享论也是一致的,允许一些数据出错,但是整个的网络连接还是active的.
** Design and Implementation
   + 虽然协议建议了实现方法,但是这却不是强制的. 这也就出现了'协议体系'和'实现体
     系'(就是符合协议要求的软件)
   + 许多负责将协议实现成软件(当时就是APRANET)的专家,受到Dijkstra的THE(荷兰语
     Eindhoven University of Technology of the Netherlands的缩写)操作系统
     的影响(THE操作系统的特点就是层次化,高层次必须依赖低层次), APRANET的设计也
     是建立在了层次结构的基础上.从此以后层次结构成了协议实现的常规方法
*** Layering
    + 层次结构的好处是可以把通信分成不同的层次,有相应经验的开发人员负责相应的层次,
      国际标准组织ISO就曾经推出过OSI七层模型,但是APRANT实现TCP/IP的时候却是使用
      了5层的结构, 5层结构是事实上的国际标准
*** Multiplexing, Demultiplexing, and Encapsulation in Layered Implementations
    + 层次结构的一个主要特点就是"协议的多路复用"(protocol multiplexing):可以让
      不同的协议在一个设备上运行,也可以让一个设备的不同实例一同运行
    + 多路复用可以发生在每一层发生, 比如, 当数据在link这一层传递的时候,不同的协议
      比如Ethernet或者Wi-Fi会加一个protocol identifier来表明自己的身份.
    + 在每一层往下传递的时候, 也会加些标示, 让下一层清楚数据来自什么协议, 这就叫做
      封装(encapsulation)
    + 下一层接到来自上一层的数据的时候,只能进行封装,不能看里面的内容,这是封装的重要
      特性:任何层对来自上一层的数据都是无法理解的,不透明的.
    + 层次结构的另外一个特点就是在通信中设计的网络设备,并不是每个设备都要实现所有的
      的层次:比如: 
      1) 终端机要实现所有的5层,
      2) 交换机(switch)实现物理层和数据链路层
      3) 路由器(Router)实现物理层,数据链路层和网络层
    + 当然,这只是早期或者说是理想中的模型, 如今的路由器都有通过浏览器访问设置的办法,
      肯定实现了运输层和应用层.
    + 从运输层开始(网络层往上), 是使用end-to-end的协议的: 两个host可以通过TCP直接
      通信, 而网络层往下, 使用的是hop-by-hop的协议:通信两端直接要经过若干次跳跃.
    + 路由器,从定义上来讲,就是有两个或者两个以上的网络端口的网络设备. 如果一个host
      有两个端口,他也可以成为路由器(但是要保证把一个端口的数据,发送到另外一个端口)
** The Architecture and Protocols of the TCP/IP Suite
*** The ARPANET Reference Model
  + 下面我们看看ARPANET的分层.这个分层和传统的经典分层有些出入,是真正的TCP/IP
    协议簇采用的分层方法:
    #+begin_example
        NO.       Name                  Description/Example       
       +----+  +-----------+  +--------------------------------------------------+        
       | 7  |  |Application|  | Virtually any Internet-compatible application,   |
       |    |  |           |  | Including the HTTP, DNS, DHCP                    |
       +----+  +-----------+  +--------------------------------------------------+
       +----+  +-----------+  +--------------------------------------------------+
       | 4  |  |Transport  |  | Provides exchange of data between abstract "port"|
       |    |  |           |  | Including TCP, UDP, SCTP, DCCP                   |
       +----+  +-----------+  +--------------------------------------------------+
       +----+  +-----------+  +--------------------------------------------------+                        
       |3.5 |  | Network   |  | Unofficial "layer" that helps accomplish setup   |                        
       |    |  |(Adjunct)  |  | and manage. Including ICMP,IGMP                  |
       +----+  +-----------+  +--------------------------------------------------+                        
       +----+  +-----------+  +--------------------------------------------------+                        
       | 3  |  | Network   |  | Defines abstract datagrams and provide routing   |                        
       |    |  |           |  | Including IP, IPv6                               |                        
       +----+  +-----------+  +--------------------------------------------------+                        
       +----+  +-----------+  +--------------------------------------------------+                        
       |2.5 |  | Link      |  | Unofficial "layer" used to map network address to|                        
       |    |  |(Adjunct)  |  | link-layer address. Including ARP                |                        
       +----+  +-----------+  +--------------------------------------------------+                        
    #+end_example
*** Multiplexing, Demultiplexing, and Encapsulation in TCP/IP
    + 前面说过每一层往下传递的时候,都会加上一定的身份信息来表明自己从什么协议来.
      在TCP中具体的例子就是:一个从网络层进入数据链路层的Ethernet Frame包含了
      一个48bit的目的地址,同时还有一个16bit的Ethernet Type. 如果数值是0x0800
      那么说明里面包裹的是IPv4的datagram, 如果是0x0806表明上层协议就是ARP.
    + 假设通过判断Ethernet Type我们发现收到的是IP 协议的信息, 然后Ethernet 
      header和trailer信息就被去掉了, 剩下的信息就交给本机的IP协议去处理
    + IP协议就会检查IP datagram的目的IP, 如果自己的多个IP中有一个是它的话,那
      说明是发给自己的(如果没有的话,再转发).然后就会检查 8bit的 IPv4 Protocol
      Field, 来判断其上层是什么协议.常见的结果有ICMP(1), IGMP(2), IPv6(4), 
      TCP(6), UPD(17)
    + 确定自己的数据完好,然后知道上层是什么协议以后,就把数据(可能需要重新排列
      多个fragment)上传给上层
    + 更高层的协议,比如TCP UDP一般就是靠端口来判断服务了
*** Port Numbers
    + Port Number是一个16bit的数字(0-65535),并没有具体的物理对应, 每一个IP
      地址都有65535个抽象的端口,每一个端口可以对应一个运输层的应用. 端口有点像
      分机的作用.
    + 端口分配分了三种:
      - 0-1023 : 熟知端口, 需要root权限
      - 1024-49151: 注册端口
      - 49152-65535: 私有端口
    + 常用服务都有一个熟知端口, 如果你细心会发现TCP/IP 服务都是奇数, 这是因为
      原来依靠的NCP协议不是全双工的,所以就需要两个端口. TCP/IP最后使用了奇数
      - SSH : 22
      - FTP : 20 and 21
      - Telnet : 23
      - SMTP : 25
      - DNS : 53
*** Names, Address, and the DNS
    + 在TCP/IP框架下, 每个链路层网口都要有一个IP地址. IP地址可以完全代表主机,
      但是不太容易被人所识别. 在TCP/IP的世界里面, DNS就是用来映射一个机器名和
      IP地址的方法.
    + DNS还是一个分布式的数据库, 而且是一个应用层的协议,它需要其他层的支持.
** Internets, Instranets, and Extranets
   + 小写的internet就是表示几个电脑连接起来
   + 首字符大写的Internet表示全世界连接起来的主机
   + intranet(内网)是一个团体内部使用的网络,在英特网上可以通过VPN(virtual 
     private network)来连接一个特定的内网
   + 如果企业的内网需要相互给特定的一部分人开放(比如供应商,客户),那么就构成了
     一个叫做extrant(外联网), 如果Internet是public的,intranet是private的,
     那么extrant就是半public半private的.
** Designing Applications
   + 我们前面讨论的,只是简单的把数据从一个host传递到另外一个host, 我们要依靠
     一些经典的设计模式来完成实际的工作
*** Client/Server
    + 网络中应用的最常见的设计模式就是C/S:
      - 循环服务器: 每次只处理一个client请求
      - 并发服务器: 每次fork一个子程序处理一个client请求.
*** Peer-to-Peer
    + P2P是一种在更广泛的网络上采用的, 每一个host都同时既是客户端,又是服务器端
    + 一个正在运行的p2p应用程序会接受一些请求,如果它能够回应这些请求当然就回应了
      (通常是发送数据给其他host), 如果它不能回应这些请求, 那么就要把这些请求转
      给其他host.
    + p2p网络的最大难点在于查找其他host, 如果一个host不能满足接受的请求,它发送
      给其他host的时候,他怎么知道发送给谁.
*** Application Programming Interfaces (APIs)
    + 不管是CS还是P2P, 都需要操作系统支持的API. 最流行的就是Berkeley socket
** Standardization Process
*** Request for Comments(RFC)
    + 互联网正式的标准都会发布成RFC
    + 不是所有的RFC都是标准, 只有叫做standards-track类的RFC才是标准
** Implementations and Software Distribution
   + 事实上的TCP标准实现来自伯克利大学的CSRG(Computer Systems Research Group)
   + 到90年代中期, 所有重要的操作系统都已经原生的支持TCP/IP了
** Attacks Involing the Internet Architecture
   + 黑客们都是TCP/IP的高手,他们根据TCP/IP协议的特点,设计出很多攻击互联网主机的方式:
     - 比如可以通过更改IP datagram的 源地址IP, 来达到欺骗的目的,这个叫做电子欺骗(spoofing),
       这样一来就很难判断出一个IP datagram真正来自哪里
     - 电子欺骗还可以和其他技术结合, 比如发送超大量的IP datagram给一个server, 使得
       这个server疲于应付海量无用请求,根本没法做正经工作,这就叫做DoS(Denial-of-service)
       攻击
     - DoS攻击采取的是一对一的方式, 一个host冲击一个server, 很显然,如果host的想耗尽
       server的资源,自己本身得配置比对方好.现在硬件发展迅速, server的配置增长很快, 
       传统的DoS攻击很快遇到了问题: 如何提高成倍提高攻击力. 这时候分布式Dos攻击(DDoS, 
       Distributed Dos)应运而生, 其实就是控制一定数量的傀儡(肉鸡)同时对某个server
       发送海量的IP datagram,以期耗尽对方的资源
     - 防止限制性资源攻击, 是利用协议或者操作系统的漏洞获取对方系统(server)的控制,从而
       访问server上的内容
     - 另外一个值得关注的问题是最初网络协议的设计没有考虑到加密,所以网络上面的内容都是
       明文传送的.这就需要更加严密的协议来提高安全性

       
   
