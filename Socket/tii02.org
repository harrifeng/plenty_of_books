#+OPTIONS:^:{}
* Chapter 2: The Internet Address Architecture
** Introduction
   + 每一个和互联网连接的设备都要求有一个固定的IP,即便是在私有网络里面也是一样
   + 正因为如此,无论是在私有网络还是在公网上面,都要防止IP重复, 一般用户是通过
     ISP(Internet Serivice Provider)的服务来保证自己有一个独特的IP的
** Expressing IP Address
   + IPv4的格式我们很熟悉, 每8个bit一组, 32个bit分成四组.每组用十进制表示, 这
     种分组十进制转换成二进制的时候就稍微有点麻烦
     #+begin_example
        +-----------------------+----------------------------------------+
        | Doteed-Quad           |  Binary                                |
        +-----------------------+----------------------------------------+
        | 0.0.0.0               |00000000 00000000 00000000 00000000     |
        +-----------------------+----------------------------------------+
        | 1.2.3.4               |00000001 00000010 00000011 00000100     |
        +-----------------------+----------------------------------------+
        | 10.0.0.255            |00001010 00000000 00000000 11111111     |
        +-----------------------+----------------------------------------+
        | 165.195.130.107       |10100101 11000011 10000010 01101011     |
        +-----------------------+----------------------------------------+
        | 255.255.255.255       |11111111 11111111 11111111 11111111     |
        +-----------------------+----------------------------------------+
     #+end_example
   + IPv6看起来就麻烦的多,因为IPv6长度高达128bit,每16个bit一组, 128bit分成8个组,
     每个分组都是十六进制的数字表示,虽然看起来长,但是和二进制转换很容易
     #+begin_example
       +---------------------------------------+---------------------------------+
       | Hex Notation                          | Binary Representation           |
       +---------------------------------------+---------------------------------+
       |5f05:2000:80ad:5800:0058:0800:2023:1d71|0101111100000101 0010000000000000|
       | (5f05:2000:80ad:5800:58:800:2023:1d71)|1000000010101101 0101100000000000|
       |                                       |0000000001011000 0000100000000000|
       |                                       |0010000000100011 0001110101110001|
       +---------------------------------------+---------------------------------+
       |0000:0000:0000:0000:0000:0000:0000:0001|0000000000000000 0000000000000000|
       | (::1)                                 |0000000000000000 0000000000000000|
       |                                       |0000000000000000 0000000000000000|
       |                                       |0000000000000000 0000000000000001|
       +---------------------------------------+---------------------------------+
       |0000:0000:0000:0000:0000:0000:0102:f001|0000000000000000 0000000000000000|
       | (::102:f001)                          |0000000000000000 0000000000000000|
       | (::1.2.240.1 last 32bit use dot style)|0000000000000000 0000000000000000|
       |                                       |0000000100000010 1111000000000001|
       +---------------------------------------+---------------------------------+
     #+end_example
   + 上面的IPv6我们下面有括号,括号里面的内容,就是IPv6的简化版的地址, 简化的方法如下:
     - 8个小组每组前面的0都可以省略, 比如:0058: ==>:58:
     - 如果整个小组都是0, 那么连续的0可以用"::"表示. 但是一个地址只能用一次"::", 比如
       0:0:0:0:0:0:0:1 ==> ::1
     - 如果一个IPv4地址想用IPv6的方法表示,那么就是前面加上::ffff,比如10.0.0.1=>
       ::ffff:10.0.0.1, 这个叫做IPv4-mapped IPv6 address
     - IPv6的最后32bit,可以用dot-quad来表示, 比如::0101:f001==>::1.2.240.1
** Basic IP Address Structure
   + 绝大部分的IPv4地址都分配给了网络上的每一个host, 或者一个路由器(这个路由器背后是一个私有
     网络), 这种IP地址叫做单播(unicast)地址, 这种地址占据绝大多数
*** Classful Addressing
    + 每一个单播的IP地址,都分成了两个部分: 网络部分和主机部分, 32-bit的IP地址也就分成了两个
      部分: net number 和 host number
    + IPv4的时候,把IP地址分成了5类, 每类都是不同的权衡:网络地址用的bit多,那么每个网络地址内
      部的主机就少. 网络地址用的bit少了, 其内部host数目就多:
      #+begin_example
                    0             7              15              23                31
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          Class A  |0| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                    Net Number                      Host(24 bits)
                   (8bits, 7 Free)
                   <--------------><----------------------------------------------->
        
                    0             7              15              23                31
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          Class B  |1|0| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                    Net Number(16bits, 14 Free)             Host(16 bits)
                   <------------------------------><------------------------------->
        
                    0             7              15              23                31
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          Class C  |1|1|0| | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                    Net Number(24bits, 21 Free)                         Host(8 bits)
                   <----------------------------------------------><--------------->
        
                    0             7              15              23                31
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          Class D  |1|1|1|0| | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                     Multicast Address(32bits, 28 free)
                   <--------------------------------------------------------------->
        
                    0             7              15              23                31
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          Class E  |1|1|1|1| | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                     Reserved Address(32bits, 28 free)
                   <--------------------------------------------------------------->
      #+end_example
    + 这种分类在第一个十年还能站得住,后来它巨大的局限性就体现出来了: 如果一个结构出现就给他一个
      A类或者B类地址,那么就对host地址造成了巨大的浪费, 但是如果只给一个C类地址,host地址又不够用.
*** Subnet Addressing
    + 当1980年代开始大面积使用局域网(LAN)以后,如何给一个小的局域网分配一个网络号(net number)
      变的很麻烦(比如,C类地址比较适合小型局域网,但是数量在用尽,A B类如何分成多个小的网络号然后
      分配给用户)
    + 新的分配方法就是子网寻址(subnet addressing), 这种方法的优点是, 虽然划分了A或B类地址,
      但是这种划分只在A类B类地址内部能看得出来.在这个地址之外的英特网时间来看,你还是那个A类或
      B类地址.
    + 子网寻址,其实就是把原来host number的一部分改成network number(但是不能再叫network number
      了, 所以叫subnet number)
    + 子网带来了便利,但同时也要付出一定的代价: 如何知道哪些部分是net地址, 哪些是host地址. 在
      子网这个概念被引入之前, 只需要看前三位(是0, 10, 还是110)就能知道哪些是net地址,哪些是host
      地址. 现在我们则需要这个网络里面所有的网络设备都要知道这些子网划分的信息.这是通过增加一个
      subnet mask 来实现的(类似于函数多加一个参数)
*** Subnet Masks
    + 所谓subnet mask就是32位的bit(对于IPv4来说), 前面都是1(代表net地址),后面都是0(代表host地址), 
      和IP地址一与(ADD),结果就是网络地址.
    + IP地址为128.32.1.14, 子网掩码(subnet mask)为255.255.255.0, ADD之后就是128.32.1.0,
      也就是说,我们知道这个128.32.1.14 IP地址的内容我们发给128.32.1.0这个interface就好了,
      它会去处理.这个小的新子网就是subnet 128.32.1.0/24
*** Variable-Length Subnet Masks (VLSM)
    + 
